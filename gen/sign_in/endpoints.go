// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SignIn endpoints
//
// Command:
// $ goa gen film-lib/design

package signin

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "SignIn" service endpoints.
type Endpoints struct {
	Auth goa.Endpoint
}

// NewEndpoints wraps the methods of the "SignIn" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Auth: NewAuthEndpoint(s, a.BasicAuth),
	}
}

// Use applies the given middleware to all the "SignIn" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Auth = m(e.Auth)
}

// NewAuthEndpoint returns an endpoint function that calls the method "auth" of
// service "SignIn".
func NewAuthEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AuthPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "basic",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
		}
		var user string
		if p.Username != nil {
			user = *p.Username
		}
		var pass string
		if p.Password != nil {
			pass = *p.Password
		}
		ctx, err = authBasicFn(ctx, user, pass, &sc)
		if err != nil {
			return nil, err
		}
		return s.Auth(ctx, p)
	}
}
