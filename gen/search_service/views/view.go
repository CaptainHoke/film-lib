// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SearchService views
//
// Command:
// $ goa gen film-lib/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// ActorWithFilmsResultCollection is the viewed result type that is projected
// based on a view.
type ActorWithFilmsResultCollection struct {
	// Type to project
	Projected ActorWithFilmsResultCollectionView
	// View to render
	View string
}

// FilmResultCollection is the viewed result type that is projected based on a
// view.
type FilmResultCollection struct {
	// Type to project
	Projected FilmResultCollectionView
	// View to render
	View string
}

// ActorWithFilmsResultCollectionView is a type that runs validations on a
// projected type.
type ActorWithFilmsResultCollectionView []*ActorWithFilmsResultView

// ActorWithFilmsResultView is a type that runs validations on a projected type.
type ActorWithFilmsResultView struct {
	// Unique ID of an Actor
	ActorID        *uint64
	ActorName      *string
	ActorSex       *string
	ActorBirthdate *string
	FilmIDs        []uint64
}

// FilmResultCollectionView is a type that runs validations on a projected type.
type FilmResultCollectionView []*FilmResultView

// FilmResultView is a type that runs validations on a projected type.
type FilmResultView struct {
	// Unique ID of a Film
	FilmID      *uint64
	Title       *string
	Description *string
	ReleaseDate *string
	Rating      *string
	Actors      *string
}

var (
	// ActorWithFilmsResultCollectionMap is a map indexing the attribute names of
	// ActorWithFilmsResultCollection by view name.
	ActorWithFilmsResultCollectionMap = map[string][]string{
		"default": {
			"ActorID",
			"ActorName",
			"ActorSex",
			"ActorBirthdate",
			"FilmIDs",
		},
	}
	// FilmResultCollectionMap is a map indexing the attribute names of
	// FilmResultCollection by view name.
	FilmResultCollectionMap = map[string][]string{
		"default": {
			"FilmID",
			"Title",
			"Description",
			"ReleaseDate",
			"Rating",
			"Actors",
		},
	}
	// ActorWithFilmsResultMap is a map indexing the attribute names of
	// ActorWithFilmsResult by view name.
	ActorWithFilmsResultMap = map[string][]string{
		"default": {
			"ActorID",
			"ActorName",
			"ActorSex",
			"ActorBirthdate",
			"FilmIDs",
		},
	}
	// FilmResultMap is a map indexing the attribute names of FilmResult by view
	// name.
	FilmResultMap = map[string][]string{
		"default": {
			"FilmID",
			"Title",
			"Description",
			"ReleaseDate",
			"Rating",
			"Actors",
		},
	}
)

// ValidateActorWithFilmsResultCollection runs the validations defined on the
// viewed result type ActorWithFilmsResultCollection.
func ValidateActorWithFilmsResultCollection(result ActorWithFilmsResultCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateActorWithFilmsResultCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateFilmResultCollection runs the validations defined on the viewed
// result type FilmResultCollection.
func ValidateFilmResultCollection(result FilmResultCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateFilmResultCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateActorWithFilmsResultCollectionView runs the validations defined on
// ActorWithFilmsResultCollectionView using the "default" view.
func ValidateActorWithFilmsResultCollectionView(result ActorWithFilmsResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateActorWithFilmsResultView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateActorWithFilmsResultView runs the validations defined on
// ActorWithFilmsResultView using the "default" view.
func ValidateActorWithFilmsResultView(result *ActorWithFilmsResultView) (err error) {
	if result.ActorID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ActorID", "result"))
	}
	return
}

// ValidateFilmResultCollectionView runs the validations defined on
// FilmResultCollectionView using the "default" view.
func ValidateFilmResultCollectionView(result FilmResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateFilmResultView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFilmResultView runs the validations defined on FilmResultView using
// the "default" view.
func ValidateFilmResultView(result *FilmResultView) (err error) {
	if result.FilmID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FilmID", "result"))
	}
	return
}
