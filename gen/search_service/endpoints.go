// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SearchService endpoints
//
// Command:
// $ goa gen film-lib/design

package searchservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "SearchService" service endpoints.
type Endpoints struct {
	SearchLibrary goa.Endpoint
}

// NewEndpoints wraps the methods of the "SearchService" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		SearchLibrary: NewSearchLibraryEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "SearchService" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.SearchLibrary = m(e.SearchLibrary)
}

// NewSearchLibraryEndpoint returns an endpoint function that calls the method
// "searchLibrary" of service "SearchService".
func NewSearchLibraryEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SearchLibraryPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.SearchLibrary(ctx, p)
	}
}
