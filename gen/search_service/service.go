// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SearchService service
//
// Command:
// $ goa gen film-lib/design

package searchservice

import (
	"context"

	"goa.design/goa/v3/security"
)

// API for querying the library
type Service interface {
	// SearchLibrary implements searchLibrary.
	SearchLibrary(context.Context, *SearchLibraryPayload) (res *Film, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "film-lib"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "SearchService"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"searchLibrary"}

// Actor + ID
type Actor struct {
	// Unique ID of an Actor
	ActorID uint64
	// Actor Info
	ActorInfo *ActorInfo
}

// Describes an Actor to be added
type ActorInfo struct {
	// Name of an Actor
	ActorName string
	// Sex of an Actor
	ActorSex string
	// YYYY-MM-DD
	ActorBirthdate string
}

// Film is the result type of the SearchService service searchLibrary method.
type Film struct {
	// Unique ID of a Film
	FilmID uint64
	// Film Info
	FilmInfo *FilmInfo
}

// Describes a Film to be added
type FilmInfo struct {
	// Title of a film
	Title string
	// Description of a film
	Description string
	// YYYY-MM-DD
	ReleaseDate string
	// Rating (0.0 - 10.0)
	Rating float32
	// List of Actors involved in Film
	Actors []*Actor
}

// SearchLibraryPayload is the payload type of the SearchService service
// searchLibrary method.
type SearchLibraryPayload struct {
	// JWT used for authentication
	Token string
	// Actor or Film Name
	QueryString string
}

// Token scopes are invalid
type InvalidScopes string

// Credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e InvalidScopes) Error() string {
	return "Token scopes are invalid"
}

// ErrorName returns "invalid-scopes".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidScopes) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid-scopes".
func (e InvalidScopes) GoaErrorName() string {
	return "invalid-scopes"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
