// Code generated by goa v3.15.2, DO NOT EDIT.
//
// FilmService views
//
// Command:
// $ goa gen film-lib/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// FilmResult is the viewed result type that is projected based on a view.
type FilmResult struct {
	// Type to project
	Projected *FilmResultView
	// View to render
	View string
}

// FilmResultView is a type that runs validations on a projected type.
type FilmResultView struct {
	// Unique ID of a Film
	FilmID      *uint64
	Title       *string
	Description *string
	ReleaseDate *string
	Rating      *string
	Actors      *string
}

var (
	// FilmResultMap is a map indexing the attribute names of FilmResult by view
	// name.
	FilmResultMap = map[string][]string{
		"default": {
			"FilmID",
			"Title",
			"Description",
			"ReleaseDate",
			"Rating",
			"Actors",
		},
	}
)

// ValidateFilmResult runs the validations defined on the viewed result type
// FilmResult.
func ValidateFilmResult(result *FilmResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateFilmResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateFilmResultView runs the validations defined on FilmResultView using
// the "default" view.
func ValidateFilmResultView(result *FilmResultView) (err error) {
	if result.FilmID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FilmID", "result"))
	}
	return
}
