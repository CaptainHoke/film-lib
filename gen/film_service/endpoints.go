// Code generated by goa v3.15.2, DO NOT EDIT.
//
// FilmService endpoints
//
// Command:
// $ goa gen film-lib/design

package filmservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "FilmService" service endpoints.
type Endpoints struct {
	GetAllFilms    goa.Endpoint
	AddFilm        goa.Endpoint
	UpdateFilmInfo goa.Endpoint
	DeleteFilm     goa.Endpoint
}

// NewEndpoints wraps the methods of the "FilmService" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetAllFilms:    NewGetAllFilmsEndpoint(s, a.JWTAuth),
		AddFilm:        NewAddFilmEndpoint(s, a.JWTAuth),
		UpdateFilmInfo: NewUpdateFilmInfoEndpoint(s, a.JWTAuth),
		DeleteFilm:     NewDeleteFilmEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "FilmService" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetAllFilms = m(e.GetAllFilms)
	e.AddFilm = m(e.AddFilm)
	e.UpdateFilmInfo = m(e.UpdateFilmInfo)
	e.DeleteFilm = m(e.DeleteFilm)
}

// NewGetAllFilmsEndpoint returns an endpoint function that calls the method
// "getAllFilms" of service "FilmService".
func NewGetAllFilmsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetAllFilmsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.GetAllFilms(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFilmResultCollection(res, "default")
		return vres, nil
	}
}

// NewAddFilmEndpoint returns an endpoint function that calls the method
// "addFilm" of service "FilmService".
func NewAddFilmEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AddFilmPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:write"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.AddFilm(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFilmResult(res, "default")
		return vres, nil
	}
}

// NewUpdateFilmInfoEndpoint returns an endpoint function that calls the method
// "updateFilmInfo" of service "FilmService".
func NewUpdateFilmInfoEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateFilmInfoPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:write"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.UpdateFilmInfo(ctx, p)
	}
}

// NewDeleteFilmEndpoint returns an endpoint function that calls the method
// "deleteFilm" of service "FilmService".
func NewDeleteFilmEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteFilmPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:write"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteFilm(ctx, p)
	}
}
