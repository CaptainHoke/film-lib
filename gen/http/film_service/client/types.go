// Code generated by goa v3.15.2, DO NOT EDIT.
//
// FilmService HTTP client types
//
// Command:
// $ goa gen film-lib/design

package client

import (
	filmservice "film-lib/gen/film_service"
	filmserviceviews "film-lib/gen/film_service/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// GetAllFilmsRequestBody is the type of the "FilmService" service
// "getAllFilms" endpoint HTTP request body.
type GetAllFilmsRequestBody struct {
	SortBy *SortByRequestBody `form:"SortBy" json:"SortBy" xml:"SortBy"`
}

// AddFilmRequestBody is the type of the "FilmService" service "addFilm"
// endpoint HTTP request body.
type AddFilmRequestBody struct {
	FilmInfo *FilmInfoRequestBody `form:"FilmInfo" json:"FilmInfo" xml:"FilmInfo"`
}

// UpdateFilmInfoRequestBody is the type of the "FilmService" service
// "updateFilmInfo" endpoint HTTP request body.
type UpdateFilmInfoRequestBody struct {
	FilmInfo *FilmInfoRequestBody `form:"FilmInfo" json:"FilmInfo" xml:"FilmInfo"`
}

// GetAllFilmsResponseBody is the type of the "FilmService" service
// "getAllFilms" endpoint HTTP response body.
type GetAllFilmsResponseBody []*FilmResultResponse

// AddFilmResponseBody is the type of the "FilmService" service "addFilm"
// endpoint HTTP response body.
type AddFilmResponseBody struct {
	// Unique ID of a Film
	FilmID      *uint64 `form:"FilmID,omitempty" json:"FilmID,omitempty" xml:"FilmID,omitempty"`
	Title       *string `form:"Title,omitempty" json:"Title,omitempty" xml:"Title,omitempty"`
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	ReleaseDate *string `form:"ReleaseDate,omitempty" json:"ReleaseDate,omitempty" xml:"ReleaseDate,omitempty"`
	Rating      *string `form:"Rating,omitempty" json:"Rating,omitempty" xml:"Rating,omitempty"`
	Actors      *string `form:"Actors,omitempty" json:"Actors,omitempty" xml:"Actors,omitempty"`
}

// AddFilmAlreadyExistsResponseBody is the type of the "FilmService" service
// "addFilm" endpoint HTTP response body for the "already-exists" error.
type AddFilmAlreadyExistsResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of existing data
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SortByRequestBody is used to define fields on request body types.
type SortByRequestBody struct {
	// Field to sort by (Rating (default) | Title | Release Date)
	Field string `form:"Field" json:"Field" xml:"Field"`
	// Ascending / Descending
	Ordering string `form:"Ordering" json:"Ordering" xml:"Ordering"`
}

// FilmResultResponse is used to define fields on response body types.
type FilmResultResponse struct {
	// Unique ID of a Film
	FilmID      *uint64 `form:"FilmID,omitempty" json:"FilmID,omitempty" xml:"FilmID,omitempty"`
	Title       *string `form:"Title,omitempty" json:"Title,omitempty" xml:"Title,omitempty"`
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	ReleaseDate *string `form:"ReleaseDate,omitempty" json:"ReleaseDate,omitempty" xml:"ReleaseDate,omitempty"`
	Rating      *string `form:"Rating,omitempty" json:"Rating,omitempty" xml:"Rating,omitempty"`
	Actors      *string `form:"Actors,omitempty" json:"Actors,omitempty" xml:"Actors,omitempty"`
}

// FilmInfoRequestBody is used to define fields on request body types.
type FilmInfoRequestBody struct {
	// Title of a film
	Title string `form:"Title" json:"Title" xml:"Title"`
	// Description of a film
	Description string `form:"Description" json:"Description" xml:"Description"`
	// YYYY-MM-DD
	ReleaseDate string `form:"ReleaseDate" json:"ReleaseDate" xml:"ReleaseDate"`
	// Rating (0.0 - 10.0)
	Rating float32 `form:"Rating" json:"Rating" xml:"Rating"`
	// List of Actors involved in Film
	Actors []*ActorRequestBody `form:"Actors" json:"Actors" xml:"Actors"`
}

// ActorRequestBody is used to define fields on request body types.
type ActorRequestBody struct {
	// Unique ID of an Actor
	ActorID uint64 `form:"ActorID" json:"ActorID" xml:"ActorID"`
	// Actor Info
	ActorInfo *ActorInfoRequestBody `form:"ActorInfo" json:"ActorInfo" xml:"ActorInfo"`
}

// ActorInfoRequestBody is used to define fields on request body types.
type ActorInfoRequestBody struct {
	// Name of an Actor
	ActorName string `form:"ActorName" json:"ActorName" xml:"ActorName"`
	// Sex of an Actor
	ActorSex string `form:"ActorSex" json:"ActorSex" xml:"ActorSex"`
	// YYYY-MM-DD
	ActorBirthdate string `form:"ActorBirthdate" json:"ActorBirthdate" xml:"ActorBirthdate"`
}

// NewGetAllFilmsRequestBody builds the HTTP request body from the payload of
// the "getAllFilms" endpoint of the "FilmService" service.
func NewGetAllFilmsRequestBody(p *filmservice.GetAllFilmsPayload) *GetAllFilmsRequestBody {
	body := &GetAllFilmsRequestBody{}
	if p.SortBy != nil {
		body.SortBy = marshalFilmserviceSortByToSortByRequestBody(p.SortBy)
	}
	return body
}

// NewAddFilmRequestBody builds the HTTP request body from the payload of the
// "addFilm" endpoint of the "FilmService" service.
func NewAddFilmRequestBody(p *filmservice.AddFilmPayload) *AddFilmRequestBody {
	body := &AddFilmRequestBody{}
	if p.FilmInfo != nil {
		body.FilmInfo = marshalFilmserviceFilmInfoToFilmInfoRequestBody(p.FilmInfo)
	}
	return body
}

// NewUpdateFilmInfoRequestBody builds the HTTP request body from the payload
// of the "updateFilmInfo" endpoint of the "FilmService" service.
func NewUpdateFilmInfoRequestBody(p *filmservice.UpdateFilmInfoPayload) *UpdateFilmInfoRequestBody {
	body := &UpdateFilmInfoRequestBody{}
	if p.FilmInfo != nil {
		body.FilmInfo = marshalFilmserviceFilmInfoToFilmInfoRequestBody(p.FilmInfo)
	}
	return body
}

// NewGetAllFilmsFilmResultCollectionOK builds a "FilmService" service
// "getAllFilms" endpoint result from a HTTP "OK" response.
func NewGetAllFilmsFilmResultCollectionOK(body GetAllFilmsResponseBody) filmserviceviews.FilmResultCollectionView {
	v := make([]*filmserviceviews.FilmResultView, len(body))
	for i, val := range body {
		v[i] = unmarshalFilmResultResponseToFilmserviceviewsFilmResultView(val)
	}

	return v
}

// NewGetAllFilmsInvalidScopes builds a FilmService service getAllFilms
// endpoint invalid-scopes error.
func NewGetAllFilmsInvalidScopes(body string) filmservice.InvalidScopes {
	v := filmservice.InvalidScopes(body)

	return v
}

// NewGetAllFilmsUnauthorized builds a FilmService service getAllFilms endpoint
// unauthorized error.
func NewGetAllFilmsUnauthorized(body string) filmservice.Unauthorized {
	v := filmservice.Unauthorized(body)

	return v
}

// NewAddFilmFilmResultCreated builds a "FilmService" service "addFilm"
// endpoint result from a HTTP "Created" response.
func NewAddFilmFilmResultCreated(body *AddFilmResponseBody) *filmserviceviews.FilmResultView {
	v := &filmserviceviews.FilmResultView{
		FilmID:      body.FilmID,
		Title:       body.Title,
		Description: body.Description,
		ReleaseDate: body.ReleaseDate,
		Rating:      body.Rating,
		Actors:      body.Actors,
	}

	return v
}

// NewAddFilmAlreadyExists builds a FilmService service addFilm endpoint
// already-exists error.
func NewAddFilmAlreadyExists(body *AddFilmAlreadyExistsResponseBody) *filmservice.AlreadyExists {
	v := &filmservice.AlreadyExists{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewAddFilmInvalidScopes builds a FilmService service addFilm endpoint
// invalid-scopes error.
func NewAddFilmInvalidScopes(body string) filmservice.InvalidScopes {
	v := filmservice.InvalidScopes(body)

	return v
}

// NewAddFilmUnauthorized builds a FilmService service addFilm endpoint
// unauthorized error.
func NewAddFilmUnauthorized(body string) filmservice.Unauthorized {
	v := filmservice.Unauthorized(body)

	return v
}

// NewUpdateFilmInfoInvalidScopes builds a FilmService service updateFilmInfo
// endpoint invalid-scopes error.
func NewUpdateFilmInfoInvalidScopes(body string) filmservice.InvalidScopes {
	v := filmservice.InvalidScopes(body)

	return v
}

// NewUpdateFilmInfoUnauthorized builds a FilmService service updateFilmInfo
// endpoint unauthorized error.
func NewUpdateFilmInfoUnauthorized(body string) filmservice.Unauthorized {
	v := filmservice.Unauthorized(body)

	return v
}

// NewDeleteFilmInvalidScopes builds a FilmService service deleteFilm endpoint
// invalid-scopes error.
func NewDeleteFilmInvalidScopes(body string) filmservice.InvalidScopes {
	v := filmservice.InvalidScopes(body)

	return v
}

// NewDeleteFilmUnauthorized builds a FilmService service deleteFilm endpoint
// unauthorized error.
func NewDeleteFilmUnauthorized(body string) filmservice.Unauthorized {
	v := filmservice.Unauthorized(body)

	return v
}

// ValidateAddFilmAlreadyExistsResponseBody runs the validations defined on
// addFilm_already-exists_response_body
func ValidateAddFilmAlreadyExistsResponseBody(body *AddFilmAlreadyExistsResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateFilmResultResponse runs the validations defined on FilmResultResponse
func ValidateFilmResultResponse(body *FilmResultResponse) (err error) {
	if body.FilmID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FilmID", "body"))
	}
	return
}

// ValidateFilmInfoRequestBody runs the validations defined on
// FilmInfoRequestBody
func ValidateFilmInfoRequestBody(body *FilmInfoRequestBody) (err error) {
	if body.Actors == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Actors", "body"))
	}
	if utf8.RuneCountInString(body.Title) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Title", body.Title, utf8.RuneCountInString(body.Title), 1, true))
	}
	if utf8.RuneCountInString(body.Title) > 150 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Title", body.Title, utf8.RuneCountInString(body.Title), 150, false))
	}
	if utf8.RuneCountInString(body.Description) > 1000 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Description", body.Description, utf8.RuneCountInString(body.Description), 1000, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.ReleaseDate", body.ReleaseDate, "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$"))
	if body.Rating < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Rating", body.Rating, 0, true))
	}
	if body.Rating > 10 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Rating", body.Rating, 10, false))
	}
	for _, e := range body.Actors {
		if e != nil {
			if err2 := ValidateActorRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateActorRequestBody runs the validations defined on ActorRequestBody
func ValidateActorRequestBody(body *ActorRequestBody) (err error) {
	if body.ActorInfo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ActorInfo", "body"))
	}
	if body.ActorInfo != nil {
		if err2 := ValidateActorInfoRequestBody(body.ActorInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateActorInfoRequestBody runs the validations defined on
// ActorInfoRequestBody
func ValidateActorInfoRequestBody(body *ActorInfoRequestBody) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("body.ActorName", body.ActorName, "^.*\\S.*$"))
	if utf8.RuneCountInString(body.ActorName) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.ActorName", body.ActorName, utf8.RuneCountInString(body.ActorName), 32, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.ActorSex", body.ActorSex, "^(M|F)$"))
	err = goa.MergeErrors(err, goa.ValidatePattern("body.ActorBirthdate", body.ActorBirthdate, "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$"))
	return
}
