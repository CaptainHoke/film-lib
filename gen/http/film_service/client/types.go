// Code generated by goa v3.15.2, DO NOT EDIT.
//
// FilmService HTTP client types
//
// Command:
// $ goa gen film-lib/design

package client

import (
	filmservice "film-lib/gen/film_service"
	filmserviceviews "film-lib/gen/film_service/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// AddFilmRequestBody is the type of the "FilmService" service "addFilm"
// endpoint HTTP request body.
type AddFilmRequestBody struct {
	FilmInfo *FilmInfoRequestBody `form:"FilmInfo" json:"FilmInfo" xml:"FilmInfo"`
}

// UpdateFilmInfoRequestBody is the type of the "FilmService" service
// "updateFilmInfo" endpoint HTTP request body.
type UpdateFilmInfoRequestBody struct {
	FilmInfo *FilmInfoRequestBody `form:"FilmInfo" json:"FilmInfo" xml:"FilmInfo"`
}

// AddFilmResponseBody is the type of the "FilmService" service "addFilm"
// endpoint HTTP response body.
type AddFilmResponseBody struct {
	// Unique ID of a Film
	FilmID      *uint64 `form:"FilmID,omitempty" json:"FilmID,omitempty" xml:"FilmID,omitempty"`
	Title       *string `form:"Title,omitempty" json:"Title,omitempty" xml:"Title,omitempty"`
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	ReleaseDate *string `form:"ReleaseDate,omitempty" json:"ReleaseDate,omitempty" xml:"ReleaseDate,omitempty"`
	Rating      *string `form:"Rating,omitempty" json:"Rating,omitempty" xml:"Rating,omitempty"`
	Actors      *string `form:"Actors,omitempty" json:"Actors,omitempty" xml:"Actors,omitempty"`
}

// AddFilmAlreadyExistsResponseBody is the type of the "FilmService" service
// "addFilm" endpoint HTTP response body for the "already-exists" error.
type AddFilmAlreadyExistsResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of existing data
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateFilmInfoNotFoundResponseBody is the type of the "FilmService" service
// "updateFilmInfo" endpoint HTTP response body for the "not-found" error.
type UpdateFilmInfoNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing data
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// FilmInfoRequestBody is used to define fields on request body types.
type FilmInfoRequestBody struct {
	// Title of a film
	Title string `form:"Title" json:"Title" xml:"Title"`
	// Description of a film
	Description string `form:"Description" json:"Description" xml:"Description"`
	// YYYY-MM-DD
	ReleaseDate string `form:"ReleaseDate" json:"ReleaseDate" xml:"ReleaseDate"`
	// Rating (0.0 - 10.0)
	Rating float32 `form:"Rating" json:"Rating" xml:"Rating"`
	// Actors' Ids
	Actors []uint64 `form:"Actors" json:"Actors" xml:"Actors"`
}

// NewAddFilmRequestBody builds the HTTP request body from the payload of the
// "addFilm" endpoint of the "FilmService" service.
func NewAddFilmRequestBody(p *filmservice.AddFilmPayload) *AddFilmRequestBody {
	body := &AddFilmRequestBody{}
	if p.FilmInfo != nil {
		body.FilmInfo = marshalFilmserviceFilmInfoToFilmInfoRequestBody(p.FilmInfo)
	}
	return body
}

// NewUpdateFilmInfoRequestBody builds the HTTP request body from the payload
// of the "updateFilmInfo" endpoint of the "FilmService" service.
func NewUpdateFilmInfoRequestBody(p *filmservice.UpdateFilmInfoPayload) *UpdateFilmInfoRequestBody {
	body := &UpdateFilmInfoRequestBody{}
	if p.FilmInfo != nil {
		body.FilmInfo = marshalFilmserviceFilmInfoToFilmInfoRequestBody(p.FilmInfo)
	}
	return body
}

// NewAddFilmFilmResultCreated builds a "FilmService" service "addFilm"
// endpoint result from a HTTP "Created" response.
func NewAddFilmFilmResultCreated(body *AddFilmResponseBody) *filmserviceviews.FilmResultView {
	v := &filmserviceviews.FilmResultView{
		FilmID:      body.FilmID,
		Title:       body.Title,
		Description: body.Description,
		ReleaseDate: body.ReleaseDate,
		Rating:      body.Rating,
		Actors:      body.Actors,
	}

	return v
}

// NewAddFilmAlreadyExists builds a FilmService service addFilm endpoint
// already-exists error.
func NewAddFilmAlreadyExists(body *AddFilmAlreadyExistsResponseBody) *filmservice.AlreadyExists {
	v := &filmservice.AlreadyExists{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewAddFilmInvalidScopes builds a FilmService service addFilm endpoint
// invalid-scopes error.
func NewAddFilmInvalidScopes(body string) filmservice.InvalidScopes {
	v := filmservice.InvalidScopes(body)

	return v
}

// NewAddFilmUnauthorized builds a FilmService service addFilm endpoint
// unauthorized error.
func NewAddFilmUnauthorized(body string) filmservice.Unauthorized {
	v := filmservice.Unauthorized(body)

	return v
}

// NewUpdateFilmInfoNotFound builds a FilmService service updateFilmInfo
// endpoint not-found error.
func NewUpdateFilmInfoNotFound(body *UpdateFilmInfoNotFoundResponseBody) *filmservice.NotFound {
	v := &filmservice.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewUpdateFilmInfoInvalidScopes builds a FilmService service updateFilmInfo
// endpoint invalid-scopes error.
func NewUpdateFilmInfoInvalidScopes(body string) filmservice.InvalidScopes {
	v := filmservice.InvalidScopes(body)

	return v
}

// NewUpdateFilmInfoUnauthorized builds a FilmService service updateFilmInfo
// endpoint unauthorized error.
func NewUpdateFilmInfoUnauthorized(body string) filmservice.Unauthorized {
	v := filmservice.Unauthorized(body)

	return v
}

// NewDeleteFilmInvalidScopes builds a FilmService service deleteFilm endpoint
// invalid-scopes error.
func NewDeleteFilmInvalidScopes(body string) filmservice.InvalidScopes {
	v := filmservice.InvalidScopes(body)

	return v
}

// NewDeleteFilmUnauthorized builds a FilmService service deleteFilm endpoint
// unauthorized error.
func NewDeleteFilmUnauthorized(body string) filmservice.Unauthorized {
	v := filmservice.Unauthorized(body)

	return v
}

// ValidateAddFilmAlreadyExistsResponseBody runs the validations defined on
// addFilm_already-exists_response_body
func ValidateAddFilmAlreadyExistsResponseBody(body *AddFilmAlreadyExistsResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateUpdateFilmInfoNotFoundResponseBody runs the validations defined on
// updateFilmInfo_not-found_response_body
func ValidateUpdateFilmInfoNotFoundResponseBody(body *UpdateFilmInfoNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateFilmInfoRequestBody runs the validations defined on
// FilmInfoRequestBody
func ValidateFilmInfoRequestBody(body *FilmInfoRequestBody) (err error) {
	if body.Actors == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Actors", "body"))
	}
	if utf8.RuneCountInString(body.Title) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Title", body.Title, utf8.RuneCountInString(body.Title), 1, true))
	}
	if utf8.RuneCountInString(body.Title) > 150 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Title", body.Title, utf8.RuneCountInString(body.Title), 150, false))
	}
	if utf8.RuneCountInString(body.Description) > 1000 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Description", body.Description, utf8.RuneCountInString(body.Description), 1000, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.ReleaseDate", body.ReleaseDate, "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$"))
	if body.Rating < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Rating", body.Rating, 0, true))
	}
	if body.Rating > 10 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.Rating", body.Rating, 10, false))
	}
	return
}
