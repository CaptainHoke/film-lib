// Code generated by goa v3.15.2, DO NOT EDIT.
//
// FilmService HTTP client CLI support package
//
// Command:
// $ goa gen film-lib/design

package client

import (
	"encoding/json"
	filmservice "film-lib/gen/film_service"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetAllFilmsPayload builds the payload for the FilmService getAllFilms
// endpoint from CLI flags.
func BuildGetAllFilmsPayload(filmServiceGetAllFilmsBody string, filmServiceGetAllFilmsToken string) (*filmservice.GetAllFilmsPayload, error) {
	var err error
	var body GetAllFilmsRequestBody
	{
		err = json.Unmarshal([]byte(filmServiceGetAllFilmsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"SortBy\": {\n         \"Field\": \"Provident non totam.\",\n         \"Ordering\": \"Magnam non excepturi est id laudantium enim.\"\n      }\n   }'")
		}
		if body.SortBy == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("SortBy", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = filmServiceGetAllFilmsToken
	}
	v := &filmservice.GetAllFilmsPayload{}
	if body.SortBy != nil {
		v.SortBy = marshalSortByRequestBodyToFilmserviceSortBy(body.SortBy)
	}
	v.Token = token

	return v, nil
}

// BuildAddFilmPayload builds the payload for the FilmService addFilm endpoint
// from CLI flags.
func BuildAddFilmPayload(filmServiceAddFilmBody string, filmServiceAddFilmToken string) (*filmservice.AddFilmPayload, error) {
	var err error
	var body AddFilmRequestBody
	{
		err = json.Unmarshal([]byte(filmServiceAddFilmBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"FilmInfo\": {\n         \"Actors\": [\n            {\n               \"ActorID\": 239,\n               \"ActorInfo\": {\n                  \"ActorBirthdate\": \"2024-03-18\",\n                  \"ActorName\": \"Margo Robbie\",\n                  \"ActorSex\": \"F\"\n               }\n            },\n            {\n               \"ActorID\": 239,\n               \"ActorInfo\": {\n                  \"ActorBirthdate\": \"2024-03-18\",\n                  \"ActorName\": \"Margo Robbie\",\n                  \"ActorSex\": \"F\"\n               }\n            }\n         ],\n         \"Description\": \"7y9\",\n         \"Rating\": 5.3355002,\n         \"ReleaseDate\": \"2024-03-18\",\n         \"Title\": \"3y\"\n      }\n   }'")
		}
		if body.FilmInfo == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("FilmInfo", "body"))
		}
		if body.FilmInfo != nil {
			if err2 := ValidateFilmInfoRequestBody(body.FilmInfo); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = filmServiceAddFilmToken
	}
	v := &filmservice.AddFilmPayload{}
	if body.FilmInfo != nil {
		v.FilmInfo = marshalFilmInfoRequestBodyToFilmserviceFilmInfo(body.FilmInfo)
	}
	v.Token = token

	return v, nil
}

// BuildUpdateFilmInfoPayload builds the payload for the FilmService
// updateFilmInfo endpoint from CLI flags.
func BuildUpdateFilmInfoPayload(filmServiceUpdateFilmInfoBody string, filmServiceUpdateFilmInfoFilmID string, filmServiceUpdateFilmInfoToken string) (*filmservice.UpdateFilmInfoPayload, error) {
	var err error
	var body UpdateFilmInfoRequestBody
	{
		err = json.Unmarshal([]byte(filmServiceUpdateFilmInfoBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"FilmInfo\": {\n         \"Actors\": [\n            {\n               \"ActorID\": 239,\n               \"ActorInfo\": {\n                  \"ActorBirthdate\": \"2024-03-18\",\n                  \"ActorName\": \"Margo Robbie\",\n                  \"ActorSex\": \"F\"\n               }\n            },\n            {\n               \"ActorID\": 239,\n               \"ActorInfo\": {\n                  \"ActorBirthdate\": \"2024-03-18\",\n                  \"ActorName\": \"Margo Robbie\",\n                  \"ActorSex\": \"F\"\n               }\n            }\n         ],\n         \"Description\": \"7y9\",\n         \"Rating\": 5.3355002,\n         \"ReleaseDate\": \"2024-03-18\",\n         \"Title\": \"3y\"\n      }\n   }'")
		}
		if body.FilmInfo == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("FilmInfo", "body"))
		}
		if body.FilmInfo != nil {
			if err2 := ValidateFilmInfoRequestBody(body.FilmInfo); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var filmID uint64
	{
		filmID, err = strconv.ParseUint(filmServiceUpdateFilmInfoFilmID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for filmID, must be UINT64")
		}
	}
	var token string
	{
		token = filmServiceUpdateFilmInfoToken
	}
	v := &filmservice.UpdateFilmInfoPayload{}
	if body.FilmInfo != nil {
		v.FilmInfo = marshalFilmInfoRequestBodyToFilmserviceFilmInfo(body.FilmInfo)
	}
	v.FilmID = filmID
	v.Token = token

	return v, nil
}

// BuildDeleteFilmPayload builds the payload for the FilmService deleteFilm
// endpoint from CLI flags.
func BuildDeleteFilmPayload(filmServiceDeleteFilmFilmID string, filmServiceDeleteFilmToken string) (*filmservice.DeleteFilmPayload, error) {
	var filmID string
	{
		filmID = filmServiceDeleteFilmFilmID
	}
	var token string
	{
		token = filmServiceDeleteFilmToken
	}
	v := &filmservice.DeleteFilmPayload{}
	v.FilmID = filmID
	v.Token = token

	return v, nil
}
