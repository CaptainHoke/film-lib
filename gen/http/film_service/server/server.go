// Code generated by goa v3.15.2, DO NOT EDIT.
//
// FilmService HTTP server
//
// Command:
// $ goa gen film-lib/design

package server

import (
	"context"
	filmservice "film-lib/gen/film_service"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the FilmService service endpoint HTTP handlers.
type Server struct {
	Mounts         []*MountPoint
	GetAllFilms    http.Handler
	AddFilm        http.Handler
	UpdateFilmInfo http.Handler
	DeleteFilm     http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the FilmService service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *filmservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetAllFilms", "GET", "/films"},
			{"AddFilm", "POST", "/films"},
			{"UpdateFilmInfo", "PUT", "/films/{FilmID}"},
			{"DeleteFilm", "DELETE", "/films/{FilmID}"},
		},
		GetAllFilms:    NewGetAllFilmsHandler(e.GetAllFilms, mux, decoder, encoder, errhandler, formatter),
		AddFilm:        NewAddFilmHandler(e.AddFilm, mux, decoder, encoder, errhandler, formatter),
		UpdateFilmInfo: NewUpdateFilmInfoHandler(e.UpdateFilmInfo, mux, decoder, encoder, errhandler, formatter),
		DeleteFilm:     NewDeleteFilmHandler(e.DeleteFilm, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "FilmService" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetAllFilms = m(s.GetAllFilms)
	s.AddFilm = m(s.AddFilm)
	s.UpdateFilmInfo = m(s.UpdateFilmInfo)
	s.DeleteFilm = m(s.DeleteFilm)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return filmservice.MethodNames[:] }

// Mount configures the mux to serve the FilmService endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetAllFilmsHandler(mux, h.GetAllFilms)
	MountAddFilmHandler(mux, h.AddFilm)
	MountUpdateFilmInfoHandler(mux, h.UpdateFilmInfo)
	MountDeleteFilmHandler(mux, h.DeleteFilm)
}

// Mount configures the mux to serve the FilmService endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetAllFilmsHandler configures the mux to serve the "FilmService"
// service "getAllFilms" endpoint.
func MountGetAllFilmsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/films", f)
}

// NewGetAllFilmsHandler creates a HTTP handler which loads the HTTP request
// and calls the "FilmService" service "getAllFilms" endpoint.
func NewGetAllFilmsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAllFilmsRequest(mux, decoder)
		encodeResponse = EncodeGetAllFilmsResponse(encoder)
		encodeError    = EncodeGetAllFilmsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAllFilms")
		ctx = context.WithValue(ctx, goa.ServiceKey, "FilmService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAddFilmHandler configures the mux to serve the "FilmService" service
// "addFilm" endpoint.
func MountAddFilmHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/films", f)
}

// NewAddFilmHandler creates a HTTP handler which loads the HTTP request and
// calls the "FilmService" service "addFilm" endpoint.
func NewAddFilmHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddFilmRequest(mux, decoder)
		encodeResponse = EncodeAddFilmResponse(encoder)
		encodeError    = EncodeAddFilmError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "addFilm")
		ctx = context.WithValue(ctx, goa.ServiceKey, "FilmService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateFilmInfoHandler configures the mux to serve the "FilmService"
// service "updateFilmInfo" endpoint.
func MountUpdateFilmInfoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/films/{FilmID}", f)
}

// NewUpdateFilmInfoHandler creates a HTTP handler which loads the HTTP request
// and calls the "FilmService" service "updateFilmInfo" endpoint.
func NewUpdateFilmInfoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateFilmInfoRequest(mux, decoder)
		encodeResponse = EncodeUpdateFilmInfoResponse(encoder)
		encodeError    = EncodeUpdateFilmInfoError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateFilmInfo")
		ctx = context.WithValue(ctx, goa.ServiceKey, "FilmService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteFilmHandler configures the mux to serve the "FilmService" service
// "deleteFilm" endpoint.
func MountDeleteFilmHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/films/{FilmID}", f)
}

// NewDeleteFilmHandler creates a HTTP handler which loads the HTTP request and
// calls the "FilmService" service "deleteFilm" endpoint.
func NewDeleteFilmHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteFilmRequest(mux, decoder)
		encodeResponse = EncodeDeleteFilmResponse(encoder)
		encodeError    = EncodeDeleteFilmError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteFilm")
		ctx = context.WithValue(ctx, goa.ServiceKey, "FilmService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
