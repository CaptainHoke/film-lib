// Code generated by goa v3.15.2, DO NOT EDIT.
//
// film-lib HTTP client CLI support package
//
// Command:
// $ goa gen film-lib/design

package cli

import (
	actorservicec "film-lib/gen/http/actor_service/client"
	filmservicec "film-lib/gen/http/film_service/client"
	isalivec "film-lib/gen/http/is_alive/client"
	searchservicec "film-lib/gen/http/search_service/client"
	signinc "film-lib/gen/http/sign_in/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `is-alive check
actor-service (add-actor|update-actor-info|delete-actor)
film-service (add-film|update-film-info|delete-film)
search-service (search-library|get-all-actors|get-all-films)
sign-in auth
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` is-alive check` + "\n" +
		os.Args[0] + ` actor-service add-actor --body '{
      "ActorInfo": {
         "ActorBirthdate": "2024-03-18",
         "ActorName": "Margo Robbie",
         "ActorSex": "F"
      }
   }' --token "Ad necessitatibus voluptas dicta omnis fuga possimus."` + "\n" +
		os.Args[0] + ` film-service add-film --body '{
      "FilmInfo": {
         "Actors": [
            15409686236987074460,
            1963945278260898944
         ],
         "Description": "c6v",
         "Rating": 3.8577452,
         "ReleaseDate": "2024-03-18",
         "Title": "y2u"
      }
   }' --token "Ut error iste repellat placeat dicta."` + "\n" +
		os.Args[0] + ` search-service search-library --query-string "Non totam minus magnam non." --token "Est id laudantium enim at consectetur."` + "\n" +
		os.Args[0] + ` sign-in auth --username "user" --password "password"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		isAliveFlags = flag.NewFlagSet("is-alive", flag.ContinueOnError)

		isAliveCheckFlags = flag.NewFlagSet("check", flag.ExitOnError)

		actorServiceFlags = flag.NewFlagSet("actor-service", flag.ContinueOnError)

		actorServiceAddActorFlags     = flag.NewFlagSet("add-actor", flag.ExitOnError)
		actorServiceAddActorBodyFlag  = actorServiceAddActorFlags.String("body", "REQUIRED", "")
		actorServiceAddActorTokenFlag = actorServiceAddActorFlags.String("token", "", "")

		actorServiceUpdateActorInfoFlags       = flag.NewFlagSet("update-actor-info", flag.ExitOnError)
		actorServiceUpdateActorInfoBodyFlag    = actorServiceUpdateActorInfoFlags.String("body", "REQUIRED", "")
		actorServiceUpdateActorInfoActorIDFlag = actorServiceUpdateActorInfoFlags.String("actor-id", "REQUIRED", "")
		actorServiceUpdateActorInfoTokenFlag   = actorServiceUpdateActorInfoFlags.String("token", "", "")

		actorServiceDeleteActorFlags       = flag.NewFlagSet("delete-actor", flag.ExitOnError)
		actorServiceDeleteActorActorIDFlag = actorServiceDeleteActorFlags.String("actor-id", "REQUIRED", "Actor ID")
		actorServiceDeleteActorTokenFlag   = actorServiceDeleteActorFlags.String("token", "", "")

		filmServiceFlags = flag.NewFlagSet("film-service", flag.ContinueOnError)

		filmServiceAddFilmFlags     = flag.NewFlagSet("add-film", flag.ExitOnError)
		filmServiceAddFilmBodyFlag  = filmServiceAddFilmFlags.String("body", "REQUIRED", "")
		filmServiceAddFilmTokenFlag = filmServiceAddFilmFlags.String("token", "", "")

		filmServiceUpdateFilmInfoFlags      = flag.NewFlagSet("update-film-info", flag.ExitOnError)
		filmServiceUpdateFilmInfoBodyFlag   = filmServiceUpdateFilmInfoFlags.String("body", "REQUIRED", "")
		filmServiceUpdateFilmInfoFilmIDFlag = filmServiceUpdateFilmInfoFlags.String("film-id", "REQUIRED", "")
		filmServiceUpdateFilmInfoTokenFlag  = filmServiceUpdateFilmInfoFlags.String("token", "", "")

		filmServiceDeleteFilmFlags      = flag.NewFlagSet("delete-film", flag.ExitOnError)
		filmServiceDeleteFilmFilmIDFlag = filmServiceDeleteFilmFlags.String("film-id", "REQUIRED", "Film ID")
		filmServiceDeleteFilmTokenFlag  = filmServiceDeleteFilmFlags.String("token", "", "")

		searchServiceFlags = flag.NewFlagSet("search-service", flag.ContinueOnError)

		searchServiceSearchLibraryFlags           = flag.NewFlagSet("search-library", flag.ExitOnError)
		searchServiceSearchLibraryQueryStringFlag = searchServiceSearchLibraryFlags.String("query-string", "", "")
		searchServiceSearchLibraryTokenFlag       = searchServiceSearchLibraryFlags.String("token", "", "")

		searchServiceGetAllActorsFlags     = flag.NewFlagSet("get-all-actors", flag.ExitOnError)
		searchServiceGetAllActorsTokenFlag = searchServiceGetAllActorsFlags.String("token", "", "")

		searchServiceGetAllFilmsFlags     = flag.NewFlagSet("get-all-films", flag.ExitOnError)
		searchServiceGetAllFilmsBodyFlag  = searchServiceGetAllFilmsFlags.String("body", "REQUIRED", "")
		searchServiceGetAllFilmsTokenFlag = searchServiceGetAllFilmsFlags.String("token", "", "")

		signInFlags = flag.NewFlagSet("sign-in", flag.ContinueOnError)

		signInAuthFlags        = flag.NewFlagSet("auth", flag.ExitOnError)
		signInAuthUsernameFlag = signInAuthFlags.String("username", "", "Username used to perform signin")
		signInAuthPasswordFlag = signInAuthFlags.String("password", "", "Password used to perform signin")
	)
	isAliveFlags.Usage = isAliveUsage
	isAliveCheckFlags.Usage = isAliveCheckUsage

	actorServiceFlags.Usage = actorServiceUsage
	actorServiceAddActorFlags.Usage = actorServiceAddActorUsage
	actorServiceUpdateActorInfoFlags.Usage = actorServiceUpdateActorInfoUsage
	actorServiceDeleteActorFlags.Usage = actorServiceDeleteActorUsage

	filmServiceFlags.Usage = filmServiceUsage
	filmServiceAddFilmFlags.Usage = filmServiceAddFilmUsage
	filmServiceUpdateFilmInfoFlags.Usage = filmServiceUpdateFilmInfoUsage
	filmServiceDeleteFilmFlags.Usage = filmServiceDeleteFilmUsage

	searchServiceFlags.Usage = searchServiceUsage
	searchServiceSearchLibraryFlags.Usage = searchServiceSearchLibraryUsage
	searchServiceGetAllActorsFlags.Usage = searchServiceGetAllActorsUsage
	searchServiceGetAllFilmsFlags.Usage = searchServiceGetAllFilmsUsage

	signInFlags.Usage = signInUsage
	signInAuthFlags.Usage = signInAuthUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "is-alive":
			svcf = isAliveFlags
		case "actor-service":
			svcf = actorServiceFlags
		case "film-service":
			svcf = filmServiceFlags
		case "search-service":
			svcf = searchServiceFlags
		case "sign-in":
			svcf = signInFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "is-alive":
			switch epn {
			case "check":
				epf = isAliveCheckFlags

			}

		case "actor-service":
			switch epn {
			case "add-actor":
				epf = actorServiceAddActorFlags

			case "update-actor-info":
				epf = actorServiceUpdateActorInfoFlags

			case "delete-actor":
				epf = actorServiceDeleteActorFlags

			}

		case "film-service":
			switch epn {
			case "add-film":
				epf = filmServiceAddFilmFlags

			case "update-film-info":
				epf = filmServiceUpdateFilmInfoFlags

			case "delete-film":
				epf = filmServiceDeleteFilmFlags

			}

		case "search-service":
			switch epn {
			case "search-library":
				epf = searchServiceSearchLibraryFlags

			case "get-all-actors":
				epf = searchServiceGetAllActorsFlags

			case "get-all-films":
				epf = searchServiceGetAllFilmsFlags

			}

		case "sign-in":
			switch epn {
			case "auth":
				epf = signInAuthFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "is-alive":
			c := isalivec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "check":
				endpoint = c.Check()
				data = nil
			}
		case "actor-service":
			c := actorservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add-actor":
				endpoint = c.AddActor()
				data, err = actorservicec.BuildAddActorPayload(*actorServiceAddActorBodyFlag, *actorServiceAddActorTokenFlag)
			case "update-actor-info":
				endpoint = c.UpdateActorInfo()
				data, err = actorservicec.BuildUpdateActorInfoPayload(*actorServiceUpdateActorInfoBodyFlag, *actorServiceUpdateActorInfoActorIDFlag, *actorServiceUpdateActorInfoTokenFlag)
			case "delete-actor":
				endpoint = c.DeleteActor()
				data, err = actorservicec.BuildDeleteActorPayload(*actorServiceDeleteActorActorIDFlag, *actorServiceDeleteActorTokenFlag)
			}
		case "film-service":
			c := filmservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add-film":
				endpoint = c.AddFilm()
				data, err = filmservicec.BuildAddFilmPayload(*filmServiceAddFilmBodyFlag, *filmServiceAddFilmTokenFlag)
			case "update-film-info":
				endpoint = c.UpdateFilmInfo()
				data, err = filmservicec.BuildUpdateFilmInfoPayload(*filmServiceUpdateFilmInfoBodyFlag, *filmServiceUpdateFilmInfoFilmIDFlag, *filmServiceUpdateFilmInfoTokenFlag)
			case "delete-film":
				endpoint = c.DeleteFilm()
				data, err = filmservicec.BuildDeleteFilmPayload(*filmServiceDeleteFilmFilmIDFlag, *filmServiceDeleteFilmTokenFlag)
			}
		case "search-service":
			c := searchservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "search-library":
				endpoint = c.SearchLibrary()
				data, err = searchservicec.BuildSearchLibraryPayload(*searchServiceSearchLibraryQueryStringFlag, *searchServiceSearchLibraryTokenFlag)
			case "get-all-actors":
				endpoint = c.GetAllActors()
				data, err = searchservicec.BuildGetAllActorsPayload(*searchServiceGetAllActorsTokenFlag)
			case "get-all-films":
				endpoint = c.GetAllFilms()
				data, err = searchservicec.BuildGetAllFilmsPayload(*searchServiceGetAllFilmsBodyFlag, *searchServiceGetAllFilmsTokenFlag)
			}
		case "sign-in":
			c := signinc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "auth":
				endpoint = c.Auth()
				data, err = signinc.BuildAuthPayload(*signInAuthUsernameFlag, *signInAuthPasswordFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// is-aliveUsage displays the usage of the is-alive command and its subcommands.
func isAliveUsage() {
	fmt.Fprintf(os.Stderr, `API for checking if the server is in fact alive
Usage:
    %[1]s [globalflags] is-alive COMMAND [flags]

COMMAND:
    check: Check implements check.

Additional help:
    %[1]s is-alive COMMAND --help
`, os.Args[0])
}
func isAliveCheckUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] is-alive check

Check implements check.

Example:
    %[1]s is-alive check
`, os.Args[0])
}

// actor-serviceUsage displays the usage of the actor-service command and its
// subcommands.
func actorServiceUsage() {
	fmt.Fprintf(os.Stderr, `API for actor-related requests
Usage:
    %[1]s [globalflags] actor-service COMMAND [flags]

COMMAND:
    add-actor: AddActor implements addActor.
    update-actor-info: UpdateActorInfo implements updateActorInfo.
    delete-actor: DeleteActor implements deleteActor.

Additional help:
    %[1]s actor-service COMMAND --help
`, os.Args[0])
}
func actorServiceAddActorUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] actor-service add-actor -body JSON -token STRING

AddActor implements addActor.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s actor-service add-actor --body '{
      "ActorInfo": {
         "ActorBirthdate": "2024-03-18",
         "ActorName": "Margo Robbie",
         "ActorSex": "F"
      }
   }' --token "Ad necessitatibus voluptas dicta omnis fuga possimus."
`, os.Args[0])
}

func actorServiceUpdateActorInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] actor-service update-actor-info -body JSON -actor-id UINT64 -token STRING

UpdateActorInfo implements updateActorInfo.
    -body JSON: 
    -actor-id UINT64: 
    -token STRING: 

Example:
    %[1]s actor-service update-actor-info --body '{
      "ActorInfo": {
         "ActorBirthdate": "2024-03-18",
         "ActorName": "Margo Robbie",
         "ActorSex": "F"
      }
   }' --actor-id 14892883948998841543 --token "Officiis minus hic."
`, os.Args[0])
}

func actorServiceDeleteActorUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] actor-service delete-actor -actor-id UINT64 -token STRING

DeleteActor implements deleteActor.
    -actor-id UINT64: Actor ID
    -token STRING: 

Example:
    %[1]s actor-service delete-actor --actor-id 2465801165763529177 --token "Culpa at."
`, os.Args[0])
}

// film-serviceUsage displays the usage of the film-service command and its
// subcommands.
func filmServiceUsage() {
	fmt.Fprintf(os.Stderr, `API for film-related requests
Usage:
    %[1]s [globalflags] film-service COMMAND [flags]

COMMAND:
    add-film: AddFilm implements addFilm.
    update-film-info: UpdateFilmInfo implements updateFilmInfo.
    delete-film: DeleteFilm implements deleteFilm.

Additional help:
    %[1]s film-service COMMAND --help
`, os.Args[0])
}
func filmServiceAddFilmUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] film-service add-film -body JSON -token STRING

AddFilm implements addFilm.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s film-service add-film --body '{
      "FilmInfo": {
         "Actors": [
            15409686236987074460,
            1963945278260898944
         ],
         "Description": "c6v",
         "Rating": 3.8577452,
         "ReleaseDate": "2024-03-18",
         "Title": "y2u"
      }
   }' --token "Ut error iste repellat placeat dicta."
`, os.Args[0])
}

func filmServiceUpdateFilmInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] film-service update-film-info -body JSON -film-id UINT64 -token STRING

UpdateFilmInfo implements updateFilmInfo.
    -body JSON: 
    -film-id UINT64: 
    -token STRING: 

Example:
    %[1]s film-service update-film-info --body '{
      "FilmInfo": {
         "Actors": [
            15409686236987074460,
            1963945278260898944
         ],
         "Description": "c6v",
         "Rating": 3.8577452,
         "ReleaseDate": "2024-03-18",
         "Title": "y2u"
      }
   }' --film-id 13087534782466187843 --token "Voluptas aliquam ullam aliquam."
`, os.Args[0])
}

func filmServiceDeleteFilmUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] film-service delete-film -film-id UINT64 -token STRING

DeleteFilm implements deleteFilm.
    -film-id UINT64: Film ID
    -token STRING: 

Example:
    %[1]s film-service delete-film --film-id 15564376704775934646 --token "Enim ea."
`, os.Args[0])
}

// search-serviceUsage displays the usage of the search-service command and its
// subcommands.
func searchServiceUsage() {
	fmt.Fprintf(os.Stderr, `API for querying the library
Usage:
    %[1]s [globalflags] search-service COMMAND [flags]

COMMAND:
    search-library: SearchLibrary implements searchLibrary.
    get-all-actors: GetAllActors implements getAllActors.
    get-all-films: GetAllFilms implements getAllFilms.

Additional help:
    %[1]s search-service COMMAND --help
`, os.Args[0])
}
func searchServiceSearchLibraryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] search-service search-library -query-string STRING -token STRING

SearchLibrary implements searchLibrary.
    -query-string STRING: 
    -token STRING: 

Example:
    %[1]s search-service search-library --query-string "Non totam minus magnam non." --token "Est id laudantium enim at consectetur."
`, os.Args[0])
}

func searchServiceGetAllActorsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] search-service get-all-actors -token STRING

GetAllActors implements getAllActors.
    -token STRING: 

Example:
    %[1]s search-service get-all-actors --token "Rerum repellendus voluptas."
`, os.Args[0])
}

func searchServiceGetAllFilmsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] search-service get-all-films -body JSON -token STRING

GetAllFilms implements getAllFilms.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s search-service get-all-films --body '{
      "SortBy": {
         "Field": "Rating",
         "Ordering": "Descending"
      }
   }' --token "Quo sit omnis et."
`, os.Args[0])
}

// sign-inUsage displays the usage of the sign-in command and its subcommands.
func signInUsage() {
	fmt.Fprintf(os.Stderr, `The Sign-In service authenticates users and validates tokens
Usage:
    %[1]s [globalflags] sign-in COMMAND [flags]

COMMAND:
    auth: Creates a valid JWT

Additional help:
    %[1]s sign-in COMMAND --help
`, os.Args[0])
}
func signInAuthUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sign-in auth -username STRING -password STRING

Creates a valid JWT
    -username STRING: Username used to perform signin
    -password STRING: Password used to perform signin

Example:
    %[1]s sign-in auth --username "user" --password "password"
`, os.Args[0])
}
