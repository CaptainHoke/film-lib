// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SearchService HTTP server types
//
// Command:
// $ goa gen film-lib/design

package server

import (
	searchservice "film-lib/gen/search_service"
)

// SearchLibraryResponseBody is the type of the "SearchService" service
// "searchLibrary" endpoint HTTP response body.
type SearchLibraryResponseBody struct {
	// Unique ID of a Film
	FilmID uint64 `form:"FilmID" json:"FilmID" xml:"FilmID"`
	// Film Info
	FilmInfo *FilmInfoResponseBody `form:"FilmInfo" json:"FilmInfo" xml:"FilmInfo"`
}

// FilmInfoResponseBody is used to define fields on response body types.
type FilmInfoResponseBody struct {
	// Title of a film
	Title string `form:"Title" json:"Title" xml:"Title"`
	// Description of a film
	Description string `form:"Description" json:"Description" xml:"Description"`
	// YYYY-MM-DD
	ReleaseDate string `form:"ReleaseDate" json:"ReleaseDate" xml:"ReleaseDate"`
	// Rating (0.0 - 10.0)
	Rating float32 `form:"Rating" json:"Rating" xml:"Rating"`
	// List of Actors involved in Film
	Actors []*ActorResponseBody `form:"Actors" json:"Actors" xml:"Actors"`
}

// ActorResponseBody is used to define fields on response body types.
type ActorResponseBody struct {
	// Unique ID of an Actor
	ActorID uint64 `form:"ActorID" json:"ActorID" xml:"ActorID"`
	// Actor Info
	ActorInfo *ActorInfoResponseBody `form:"ActorInfo" json:"ActorInfo" xml:"ActorInfo"`
}

// ActorInfoResponseBody is used to define fields on response body types.
type ActorInfoResponseBody struct {
	// Name of an Actor
	ActorName string `form:"ActorName" json:"ActorName" xml:"ActorName"`
	// Sex of an Actor
	ActorSex string `form:"ActorSex" json:"ActorSex" xml:"ActorSex"`
	// YYYY-MM-DD
	ActorBirthdate string `form:"ActorBirthdate" json:"ActorBirthdate" xml:"ActorBirthdate"`
}

// NewSearchLibraryResponseBody builds the HTTP response body from the result
// of the "searchLibrary" endpoint of the "SearchService" service.
func NewSearchLibraryResponseBody(res *searchservice.Film) *SearchLibraryResponseBody {
	body := &SearchLibraryResponseBody{
		FilmID: res.FilmID,
	}
	if res.FilmInfo != nil {
		body.FilmInfo = marshalSearchserviceFilmInfoToFilmInfoResponseBody(res.FilmInfo)
	}
	return body
}

// NewSearchLibraryPayload builds a SearchService service searchLibrary
// endpoint payload.
func NewSearchLibraryPayload(queryString string, token string) *searchservice.SearchLibraryPayload {
	v := &searchservice.SearchLibraryPayload{}
	v.QueryString = queryString
	v.Token = token

	return v
}
