// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SearchService HTTP server encoders and decoders
//
// Command:
// $ goa gen film-lib/design

package server

import (
	"context"
	"errors"
	searchservice "film-lib/gen/search_service"
	"io"
	"net/http"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeSearchLibraryResponse returns an encoder for responses returned by the
// SearchService searchLibrary endpoint.
func EncodeSearchLibraryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*searchservice.Film)
		enc := encoder(ctx, w)
		body := NewSearchLibraryResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSearchLibraryRequest returns a decoder for requests sent to the
// SearchService searchLibrary endpoint.
func DecodeSearchLibraryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body SearchLibraryRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSearchLibraryRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token string
		)
		token = r.Header.Get("X-Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("token", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewSearchLibraryPayload(&body, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeSearchLibraryError returns an encoder for errors returned by the
// searchLibrary SearchService endpoint.
func EncodeSearchLibraryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid-scopes":
			var res searchservice.InvalidScopes
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "unauthorized":
			var res searchservice.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalSearchserviceFilmInfoToFilmInfoResponseBody builds a value of type
// *FilmInfoResponseBody from a value of type *searchservice.FilmInfo.
func marshalSearchserviceFilmInfoToFilmInfoResponseBody(v *searchservice.FilmInfo) *FilmInfoResponseBody {
	res := &FilmInfoResponseBody{
		Title:       v.Title,
		Description: v.Description,
		ReleaseDate: v.ReleaseDate,
		Rating:      v.Rating,
	}
	if v.Actors != nil {
		res.Actors = make([]*ActorResponseBody, len(v.Actors))
		for i, val := range v.Actors {
			res.Actors[i] = marshalSearchserviceActorToActorResponseBody(val)
		}
	} else {
		res.Actors = []*ActorResponseBody{}
	}

	return res
}

// marshalSearchserviceActorToActorResponseBody builds a value of type
// *ActorResponseBody from a value of type *searchservice.Actor.
func marshalSearchserviceActorToActorResponseBody(v *searchservice.Actor) *ActorResponseBody {
	res := &ActorResponseBody{
		ActorID: v.ActorID,
	}
	if v.ActorInfo != nil {
		res.ActorInfo = marshalSearchserviceActorInfoToActorInfoResponseBody(v.ActorInfo)
	}

	return res
}

// marshalSearchserviceActorInfoToActorInfoResponseBody builds a value of type
// *ActorInfoResponseBody from a value of type *searchservice.ActorInfo.
func marshalSearchserviceActorInfoToActorInfoResponseBody(v *searchservice.ActorInfo) *ActorInfoResponseBody {
	res := &ActorInfoResponseBody{
		ActorName:      v.ActorName,
		ActorSex:       v.ActorSex,
		ActorBirthdate: v.ActorBirthdate,
	}

	return res
}
