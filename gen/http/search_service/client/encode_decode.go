// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SearchService HTTP client encoders and decoders
//
// Command:
// $ goa gen film-lib/design

package client

import (
	"bytes"
	"context"
	searchservice "film-lib/gen/search_service"
	searchserviceviews "film-lib/gen/search_service/views"
	"io"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildSearchLibraryRequest instantiates a HTTP request object with method and
// path set to call the "SearchService" service "searchLibrary" endpoint
func (c *Client) BuildSearchLibraryRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SearchLibrarySearchServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("SearchService", "searchLibrary", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSearchLibraryRequest returns an encoder for requests sent to the
// SearchService searchLibrary server.
func EncodeSearchLibraryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*searchservice.SearchLibraryPayload)
		if !ok {
			return goahttp.ErrInvalidType("SearchService", "searchLibrary", "*searchservice.SearchLibraryPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.QueryString != nil {
			values.Add("QueryString", *p.QueryString)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeSearchLibraryResponse returns a decoder for responses returned by the
// SearchService searchLibrary endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeSearchLibraryResponse may return the following errors:
//   - "invalid-scopes" (type searchservice.InvalidScopes): http.StatusForbidden
//   - "unauthorized" (type searchservice.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeSearchLibraryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SearchLibraryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "searchLibrary", err)
			}
			err = ValidateSearchLibraryResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("SearchService", "searchLibrary", err)
			}
			res := NewSearchLibraryFilmOK(&body)
			return res, nil
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "searchLibrary", err)
			}
			return nil, NewSearchLibraryInvalidScopes(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "searchLibrary", err)
			}
			return nil, NewSearchLibraryUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("SearchService", "searchLibrary", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAllActorsRequest instantiates a HTTP request object with method and
// path set to call the "SearchService" service "getAllActors" endpoint
func (c *Client) BuildGetAllActorsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAllActorsSearchServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("SearchService", "getAllActors", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAllActorsRequest returns an encoder for requests sent to the
// SearchService getAllActors server.
func EncodeGetAllActorsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*searchservice.GetAllActorsPayload)
		if !ok {
			return goahttp.ErrInvalidType("SearchService", "getAllActors", "*searchservice.GetAllActorsPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetAllActorsResponse returns a decoder for responses returned by the
// SearchService getAllActors endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetAllActorsResponse may return the following errors:
//   - "invalid-scopes" (type searchservice.InvalidScopes): http.StatusForbidden
//   - "unauthorized" (type searchservice.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetAllActorsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAllActorsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "getAllActors", err)
			}
			p := NewGetAllActorsActorWithFilmsResultCollectionOK(body)
			view := "default"
			vres := searchserviceviews.ActorWithFilmsResultCollection{Projected: p, View: view}
			if err = searchserviceviews.ValidateActorWithFilmsResultCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("SearchService", "getAllActors", err)
			}
			res := searchservice.NewActorWithFilmsResultCollection(vres)
			return res, nil
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "getAllActors", err)
			}
			return nil, NewGetAllActorsInvalidScopes(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "getAllActors", err)
			}
			return nil, NewGetAllActorsUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("SearchService", "getAllActors", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAllFilmsRequest instantiates a HTTP request object with method and
// path set to call the "SearchService" service "getAllFilms" endpoint
func (c *Client) BuildGetAllFilmsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAllFilmsSearchServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("SearchService", "getAllFilms", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAllFilmsRequest returns an encoder for requests sent to the
// SearchService getAllFilms server.
func EncodeGetAllFilmsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*searchservice.GetAllFilmsPayload)
		if !ok {
			return goahttp.ErrInvalidType("SearchService", "getAllFilms", "*searchservice.GetAllFilmsPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewGetAllFilmsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("SearchService", "getAllFilms", err)
		}
		return nil
	}
}

// DecodeGetAllFilmsResponse returns a decoder for responses returned by the
// SearchService getAllFilms endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetAllFilmsResponse may return the following errors:
//   - "invalid-scopes" (type searchservice.InvalidScopes): http.StatusForbidden
//   - "unauthorized" (type searchservice.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetAllFilmsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAllFilmsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "getAllFilms", err)
			}
			p := NewGetAllFilmsFilmResultCollectionOK(body)
			view := "default"
			vres := searchserviceviews.FilmResultCollection{Projected: p, View: view}
			if err = searchserviceviews.ValidateFilmResultCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("SearchService", "getAllFilms", err)
			}
			res := searchservice.NewFilmResultCollection(vres)
			return res, nil
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "getAllFilms", err)
			}
			return nil, NewGetAllFilmsInvalidScopes(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "getAllFilms", err)
			}
			return nil, NewGetAllFilmsUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("SearchService", "getAllFilms", resp.StatusCode, string(body))
		}
	}
}

// unmarshalFilmInfoResponseBodyToSearchserviceFilmInfo builds a value of type
// *searchservice.FilmInfo from a value of type *FilmInfoResponseBody.
func unmarshalFilmInfoResponseBodyToSearchserviceFilmInfo(v *FilmInfoResponseBody) *searchservice.FilmInfo {
	res := &searchservice.FilmInfo{
		Title:       *v.Title,
		Description: *v.Description,
		ReleaseDate: *v.ReleaseDate,
		Rating:      *v.Rating,
	}
	res.Actors = make([]uint64, len(v.Actors))
	for i, val := range v.Actors {
		res.Actors[i] = val
	}

	return res
}

// unmarshalActorWithFilmsResultResponseToSearchserviceviewsActorWithFilmsResultView
// builds a value of type *searchserviceviews.ActorWithFilmsResultView from a
// value of type *ActorWithFilmsResultResponse.
func unmarshalActorWithFilmsResultResponseToSearchserviceviewsActorWithFilmsResultView(v *ActorWithFilmsResultResponse) *searchserviceviews.ActorWithFilmsResultView {
	res := &searchserviceviews.ActorWithFilmsResultView{
		ActorID:        v.ActorID,
		ActorName:      v.ActorName,
		ActorSex:       v.ActorSex,
		ActorBirthdate: v.ActorBirthdate,
	}
	if v.FilmIDs != nil {
		res.FilmIDs = make([]uint64, len(v.FilmIDs))
		for i, val := range v.FilmIDs {
			res.FilmIDs[i] = val
		}
	}

	return res
}

// marshalSearchserviceSortByToSortByRequestBody builds a value of type
// *SortByRequestBody from a value of type *searchservice.SortBy.
func marshalSearchserviceSortByToSortByRequestBody(v *searchservice.SortBy) *SortByRequestBody {
	res := &SortByRequestBody{
		Field:    v.Field,
		Ordering: v.Ordering,
	}

	return res
}

// marshalSortByRequestBodyToSearchserviceSortBy builds a value of type
// *searchservice.SortBy from a value of type *SortByRequestBody.
func marshalSortByRequestBodyToSearchserviceSortBy(v *SortByRequestBody) *searchservice.SortBy {
	res := &searchservice.SortBy{
		Field:    v.Field,
		Ordering: v.Ordering,
	}

	return res
}

// unmarshalFilmResultResponseToSearchserviceviewsFilmResultView builds a value
// of type *searchserviceviews.FilmResultView from a value of type
// *FilmResultResponse.
func unmarshalFilmResultResponseToSearchserviceviewsFilmResultView(v *FilmResultResponse) *searchserviceviews.FilmResultView {
	res := &searchserviceviews.FilmResultView{
		FilmID:      v.FilmID,
		Title:       v.Title,
		Description: v.Description,
		ReleaseDate: v.ReleaseDate,
		Rating:      v.Rating,
		Actors:      v.Actors,
	}

	return res
}
