// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SearchService HTTP client encoders and decoders
//
// Command:
// $ goa gen film-lib/design

package client

import (
	"bytes"
	"context"
	searchservice "film-lib/gen/search_service"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildSearchLibraryRequest instantiates a HTTP request object with method and
// path set to call the "SearchService" service "searchLibrary" endpoint
func (c *Client) BuildSearchLibraryRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SearchLibrarySearchServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("SearchService", "searchLibrary", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSearchLibraryRequest returns an encoder for requests sent to the
// SearchService searchLibrary server.
func EncodeSearchLibraryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*searchservice.SearchLibraryPayload)
		if !ok {
			return goahttp.ErrInvalidType("SearchService", "searchLibrary", "*searchservice.SearchLibraryPayload", v)
		}
		{
			head := p.Token
			req.Header.Set("X-Authorization", head)
		}
		body := NewSearchLibraryRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("SearchService", "searchLibrary", err)
		}
		return nil
	}
}

// DecodeSearchLibraryResponse returns a decoder for responses returned by the
// SearchService searchLibrary endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeSearchLibraryResponse may return the following errors:
//   - "invalid-scopes" (type searchservice.InvalidScopes): http.StatusForbidden
//   - "unauthorized" (type searchservice.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeSearchLibraryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SearchLibraryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "searchLibrary", err)
			}
			err = ValidateSearchLibraryResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("SearchService", "searchLibrary", err)
			}
			res := NewSearchLibraryFilmOK(&body)
			return res, nil
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "searchLibrary", err)
			}
			return nil, NewSearchLibraryInvalidScopes(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("SearchService", "searchLibrary", err)
			}
			return nil, NewSearchLibraryUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("SearchService", "searchLibrary", resp.StatusCode, string(body))
		}
	}
}

// unmarshalFilmInfoResponseBodyToSearchserviceFilmInfo builds a value of type
// *searchservice.FilmInfo from a value of type *FilmInfoResponseBody.
func unmarshalFilmInfoResponseBodyToSearchserviceFilmInfo(v *FilmInfoResponseBody) *searchservice.FilmInfo {
	res := &searchservice.FilmInfo{
		Title:       *v.Title,
		Description: *v.Description,
		ReleaseDate: *v.ReleaseDate,
		Rating:      *v.Rating,
	}
	res.Actors = make([]*searchservice.Actor, len(v.Actors))
	for i, val := range v.Actors {
		res.Actors[i] = unmarshalActorResponseBodyToSearchserviceActor(val)
	}

	return res
}

// unmarshalActorResponseBodyToSearchserviceActor builds a value of type
// *searchservice.Actor from a value of type *ActorResponseBody.
func unmarshalActorResponseBodyToSearchserviceActor(v *ActorResponseBody) *searchservice.Actor {
	res := &searchservice.Actor{
		ActorID: *v.ActorID,
	}
	res.ActorInfo = unmarshalActorInfoResponseBodyToSearchserviceActorInfo(v.ActorInfo)

	return res
}

// unmarshalActorInfoResponseBodyToSearchserviceActorInfo builds a value of
// type *searchservice.ActorInfo from a value of type *ActorInfoResponseBody.
func unmarshalActorInfoResponseBodyToSearchserviceActorInfo(v *ActorInfoResponseBody) *searchservice.ActorInfo {
	res := &searchservice.ActorInfo{
		ActorName:      *v.ActorName,
		ActorSex:       *v.ActorSex,
		ActorBirthdate: *v.ActorBirthdate,
	}

	return res
}
