// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SearchService HTTP client CLI support package
//
// Command:
// $ goa gen film-lib/design

package client

import (
	"encoding/json"
	searchservice "film-lib/gen/search_service"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildSearchLibraryPayload builds the payload for the SearchService
// searchLibrary endpoint from CLI flags.
func BuildSearchLibraryPayload(searchServiceSearchLibraryQueryString string, searchServiceSearchLibraryToken string) (*searchservice.SearchLibraryPayload, error) {
	var queryString *string
	{
		if searchServiceSearchLibraryQueryString != "" {
			queryString = &searchServiceSearchLibraryQueryString
		}
	}
	var token *string
	{
		if searchServiceSearchLibraryToken != "" {
			token = &searchServiceSearchLibraryToken
		}
	}
	v := &searchservice.SearchLibraryPayload{}
	v.QueryString = queryString
	v.Token = token

	return v, nil
}

// BuildGetAllActorsPayload builds the payload for the SearchService
// getAllActors endpoint from CLI flags.
func BuildGetAllActorsPayload(searchServiceGetAllActorsToken string) (*searchservice.GetAllActorsPayload, error) {
	var token *string
	{
		if searchServiceGetAllActorsToken != "" {
			token = &searchServiceGetAllActorsToken
		}
	}
	v := &searchservice.GetAllActorsPayload{}
	v.Token = token

	return v, nil
}

// BuildGetAllFilmsPayload builds the payload for the SearchService getAllFilms
// endpoint from CLI flags.
func BuildGetAllFilmsPayload(searchServiceGetAllFilmsBody string, searchServiceGetAllFilmsToken string) (*searchservice.GetAllFilmsPayload, error) {
	var err error
	var body GetAllFilmsRequestBody
	{
		err = json.Unmarshal([]byte(searchServiceGetAllFilmsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"SortBy\": {\n         \"Field\": \"Rating\",\n         \"Ordering\": \"Descending\"\n      }\n   }'")
		}
		if body.SortBy == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("SortBy", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if searchServiceGetAllFilmsToken != "" {
			token = &searchServiceGetAllFilmsToken
		}
	}
	v := &searchservice.GetAllFilmsPayload{}
	if body.SortBy != nil {
		v.SortBy = marshalSortByRequestBodyToSearchserviceSortBy(body.SortBy)
	}
	v.Token = token

	return v, nil
}
