// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SearchService HTTP client types
//
// Command:
// $ goa gen film-lib/design

package client

import (
	searchservice "film-lib/gen/search_service"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// SearchLibraryResponseBody is the type of the "SearchService" service
// "searchLibrary" endpoint HTTP response body.
type SearchLibraryResponseBody struct {
	// Unique ID of a Film
	FilmID *uint64 `form:"FilmID,omitempty" json:"FilmID,omitempty" xml:"FilmID,omitempty"`
	// Film Info
	FilmInfo *FilmInfoResponseBody `form:"FilmInfo,omitempty" json:"FilmInfo,omitempty" xml:"FilmInfo,omitempty"`
}

// FilmInfoResponseBody is used to define fields on response body types.
type FilmInfoResponseBody struct {
	// Title of a film
	Title *string `form:"Title,omitempty" json:"Title,omitempty" xml:"Title,omitempty"`
	// Description of a film
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// YYYY-MM-DD
	ReleaseDate *string `form:"ReleaseDate,omitempty" json:"ReleaseDate,omitempty" xml:"ReleaseDate,omitempty"`
	// Rating (0.0 - 10.0)
	Rating *float32 `form:"Rating,omitempty" json:"Rating,omitempty" xml:"Rating,omitempty"`
	// List of Actors involved in Film
	Actors []*ActorResponseBody `form:"Actors,omitempty" json:"Actors,omitempty" xml:"Actors,omitempty"`
}

// ActorResponseBody is used to define fields on response body types.
type ActorResponseBody struct {
	// Unique ID of an Actor
	ActorID *uint64 `form:"ActorID,omitempty" json:"ActorID,omitempty" xml:"ActorID,omitempty"`
	// Actor Info
	ActorInfo *ActorInfoResponseBody `form:"ActorInfo,omitempty" json:"ActorInfo,omitempty" xml:"ActorInfo,omitempty"`
}

// ActorInfoResponseBody is used to define fields on response body types.
type ActorInfoResponseBody struct {
	// Name of an Actor
	ActorName *string `form:"ActorName,omitempty" json:"ActorName,omitempty" xml:"ActorName,omitempty"`
	// Sex of an Actor
	ActorSex *string `form:"ActorSex,omitempty" json:"ActorSex,omitempty" xml:"ActorSex,omitempty"`
	// YYYY-MM-DD
	ActorBirthdate *string `form:"ActorBirthdate,omitempty" json:"ActorBirthdate,omitempty" xml:"ActorBirthdate,omitempty"`
}

// NewSearchLibraryFilmOK builds a "SearchService" service "searchLibrary"
// endpoint result from a HTTP "OK" response.
func NewSearchLibraryFilmOK(body *SearchLibraryResponseBody) *searchservice.Film {
	v := &searchservice.Film{
		FilmID: *body.FilmID,
	}
	v.FilmInfo = unmarshalFilmInfoResponseBodyToSearchserviceFilmInfo(body.FilmInfo)

	return v
}

// NewSearchLibraryInvalidScopes builds a SearchService service searchLibrary
// endpoint invalid-scopes error.
func NewSearchLibraryInvalidScopes(body string) searchservice.InvalidScopes {
	v := searchservice.InvalidScopes(body)

	return v
}

// NewSearchLibraryUnauthorized builds a SearchService service searchLibrary
// endpoint unauthorized error.
func NewSearchLibraryUnauthorized(body string) searchservice.Unauthorized {
	v := searchservice.Unauthorized(body)

	return v
}

// ValidateSearchLibraryResponseBody runs the validations defined on
// SearchLibraryResponseBody
func ValidateSearchLibraryResponseBody(body *SearchLibraryResponseBody) (err error) {
	if body.FilmID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FilmID", "body"))
	}
	if body.FilmInfo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FilmInfo", "body"))
	}
	if body.FilmInfo != nil {
		if err2 := ValidateFilmInfoResponseBody(body.FilmInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFilmInfoResponseBody runs the validations defined on
// FilmInfoResponseBody
func ValidateFilmInfoResponseBody(body *FilmInfoResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Description", "body"))
	}
	if body.ReleaseDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ReleaseDate", "body"))
	}
	if body.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Rating", "body"))
	}
	if body.Actors == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Actors", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Title", *body.Title, utf8.RuneCountInString(*body.Title), 150, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 1000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Description", *body.Description, utf8.RuneCountInString(*body.Description), 1000, false))
		}
	}
	if body.ReleaseDate != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.ReleaseDate", *body.ReleaseDate, "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$"))
	}
	if body.Rating != nil {
		if *body.Rating < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Rating", *body.Rating, 0, true))
		}
	}
	if body.Rating != nil {
		if *body.Rating > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Rating", *body.Rating, 10, false))
		}
	}
	for _, e := range body.Actors {
		if e != nil {
			if err2 := ValidateActorResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateActorResponseBody runs the validations defined on ActorResponseBody
func ValidateActorResponseBody(body *ActorResponseBody) (err error) {
	if body.ActorID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ActorID", "body"))
	}
	if body.ActorInfo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ActorInfo", "body"))
	}
	if body.ActorInfo != nil {
		if err2 := ValidateActorInfoResponseBody(body.ActorInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateActorInfoResponseBody runs the validations defined on
// ActorInfoResponseBody
func ValidateActorInfoResponseBody(body *ActorInfoResponseBody) (err error) {
	if body.ActorName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ActorName", "body"))
	}
	if body.ActorSex == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ActorSex", "body"))
	}
	if body.ActorBirthdate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ActorBirthdate", "body"))
	}
	if body.ActorName != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.ActorName", *body.ActorName, "^.*\\S.*$"))
	}
	if body.ActorName != nil {
		if utf8.RuneCountInString(*body.ActorName) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ActorName", *body.ActorName, utf8.RuneCountInString(*body.ActorName), 32, false))
		}
	}
	if body.ActorSex != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.ActorSex", *body.ActorSex, "^(M|F)$"))
	}
	if body.ActorBirthdate != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.ActorBirthdate", *body.ActorBirthdate, "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$"))
	}
	return
}
