// Code generated by goa v3.15.2, DO NOT EDIT.
//
// SearchService HTTP client types
//
// Command:
// $ goa gen film-lib/design

package client

import (
	searchservice "film-lib/gen/search_service"
	searchserviceviews "film-lib/gen/search_service/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// GetAllFilmsRequestBody is the type of the "SearchService" service
// "getAllFilms" endpoint HTTP request body.
type GetAllFilmsRequestBody struct {
	SortBy *SortByRequestBody `form:"SortBy" json:"SortBy" xml:"SortBy"`
}

// SearchLibraryResponseBody is the type of the "SearchService" service
// "searchLibrary" endpoint HTTP response body.
type SearchLibraryResponseBody struct {
	// Unique ID of a Film
	FilmID *uint64 `form:"FilmID,omitempty" json:"FilmID,omitempty" xml:"FilmID,omitempty"`
	// Film Info
	FilmInfo *FilmInfoResponseBody `form:"FilmInfo,omitempty" json:"FilmInfo,omitempty" xml:"FilmInfo,omitempty"`
}

// GetAllActorsResponseBody is the type of the "SearchService" service
// "getAllActors" endpoint HTTP response body.
type GetAllActorsResponseBody []*ActorResultResponse

// GetAllFilmsResponseBody is the type of the "SearchService" service
// "getAllFilms" endpoint HTTP response body.
type GetAllFilmsResponseBody []*FilmResultResponse

// FilmInfoResponseBody is used to define fields on response body types.
type FilmInfoResponseBody struct {
	// Title of a film
	Title *string `form:"Title,omitempty" json:"Title,omitempty" xml:"Title,omitempty"`
	// Description of a film
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	// YYYY-MM-DD
	ReleaseDate *string `form:"ReleaseDate,omitempty" json:"ReleaseDate,omitempty" xml:"ReleaseDate,omitempty"`
	// Rating (0.0 - 10.0)
	Rating *float32 `form:"Rating,omitempty" json:"Rating,omitempty" xml:"Rating,omitempty"`
	// Actors' Ids
	Actors []uint64 `form:"Actors,omitempty" json:"Actors,omitempty" xml:"Actors,omitempty"`
}

// ActorResultResponse is used to define fields on response body types.
type ActorResultResponse struct {
	// Unique ID of an Actor
	ActorID        *uint64 `form:"ActorID,omitempty" json:"ActorID,omitempty" xml:"ActorID,omitempty"`
	ActorName      *string `form:"ActorName,omitempty" json:"ActorName,omitempty" xml:"ActorName,omitempty"`
	ActorSex       *string `form:"ActorSex,omitempty" json:"ActorSex,omitempty" xml:"ActorSex,omitempty"`
	ActorBirthdate *string `form:"ActorBirthdate,omitempty" json:"ActorBirthdate,omitempty" xml:"ActorBirthdate,omitempty"`
}

// SortByRequestBody is used to define fields on request body types.
type SortByRequestBody struct {
	// Field to sort by (Rating (default) | Title | Release Date)
	Field string `form:"Field" json:"Field" xml:"Field"`
	// Ascending / Descending
	Ordering string `form:"Ordering" json:"Ordering" xml:"Ordering"`
}

// FilmResultResponse is used to define fields on response body types.
type FilmResultResponse struct {
	// Unique ID of a Film
	FilmID      *uint64 `form:"FilmID,omitempty" json:"FilmID,omitempty" xml:"FilmID,omitempty"`
	Title       *string `form:"Title,omitempty" json:"Title,omitempty" xml:"Title,omitempty"`
	Description *string `form:"Description,omitempty" json:"Description,omitempty" xml:"Description,omitempty"`
	ReleaseDate *string `form:"ReleaseDate,omitempty" json:"ReleaseDate,omitempty" xml:"ReleaseDate,omitempty"`
	Rating      *string `form:"Rating,omitempty" json:"Rating,omitempty" xml:"Rating,omitempty"`
	Actors      *string `form:"Actors,omitempty" json:"Actors,omitempty" xml:"Actors,omitempty"`
}

// NewGetAllFilmsRequestBody builds the HTTP request body from the payload of
// the "getAllFilms" endpoint of the "SearchService" service.
func NewGetAllFilmsRequestBody(p *searchservice.GetAllFilmsPayload) *GetAllFilmsRequestBody {
	body := &GetAllFilmsRequestBody{}
	if p.SortBy != nil {
		body.SortBy = marshalSearchserviceSortByToSortByRequestBody(p.SortBy)
	}
	return body
}

// NewSearchLibraryFilmOK builds a "SearchService" service "searchLibrary"
// endpoint result from a HTTP "OK" response.
func NewSearchLibraryFilmOK(body *SearchLibraryResponseBody) *searchservice.Film {
	v := &searchservice.Film{
		FilmID: *body.FilmID,
	}
	v.FilmInfo = unmarshalFilmInfoResponseBodyToSearchserviceFilmInfo(body.FilmInfo)

	return v
}

// NewSearchLibraryInvalidScopes builds a SearchService service searchLibrary
// endpoint invalid-scopes error.
func NewSearchLibraryInvalidScopes(body string) searchservice.InvalidScopes {
	v := searchservice.InvalidScopes(body)

	return v
}

// NewSearchLibraryUnauthorized builds a SearchService service searchLibrary
// endpoint unauthorized error.
func NewSearchLibraryUnauthorized(body string) searchservice.Unauthorized {
	v := searchservice.Unauthorized(body)

	return v
}

// NewGetAllActorsActorResultCollectionOK builds a "SearchService" service
// "getAllActors" endpoint result from a HTTP "OK" response.
func NewGetAllActorsActorResultCollectionOK(body GetAllActorsResponseBody) searchserviceviews.ActorResultCollectionView {
	v := make([]*searchserviceviews.ActorResultView, len(body))
	for i, val := range body {
		v[i] = unmarshalActorResultResponseToSearchserviceviewsActorResultView(val)
	}

	return v
}

// NewGetAllActorsInvalidScopes builds a SearchService service getAllActors
// endpoint invalid-scopes error.
func NewGetAllActorsInvalidScopes(body string) searchservice.InvalidScopes {
	v := searchservice.InvalidScopes(body)

	return v
}

// NewGetAllActorsUnauthorized builds a SearchService service getAllActors
// endpoint unauthorized error.
func NewGetAllActorsUnauthorized(body string) searchservice.Unauthorized {
	v := searchservice.Unauthorized(body)

	return v
}

// NewGetAllFilmsFilmResultCollectionOK builds a "SearchService" service
// "getAllFilms" endpoint result from a HTTP "OK" response.
func NewGetAllFilmsFilmResultCollectionOK(body GetAllFilmsResponseBody) searchserviceviews.FilmResultCollectionView {
	v := make([]*searchserviceviews.FilmResultView, len(body))
	for i, val := range body {
		v[i] = unmarshalFilmResultResponseToSearchserviceviewsFilmResultView(val)
	}

	return v
}

// NewGetAllFilmsInvalidScopes builds a SearchService service getAllFilms
// endpoint invalid-scopes error.
func NewGetAllFilmsInvalidScopes(body string) searchservice.InvalidScopes {
	v := searchservice.InvalidScopes(body)

	return v
}

// NewGetAllFilmsUnauthorized builds a SearchService service getAllFilms
// endpoint unauthorized error.
func NewGetAllFilmsUnauthorized(body string) searchservice.Unauthorized {
	v := searchservice.Unauthorized(body)

	return v
}

// ValidateSearchLibraryResponseBody runs the validations defined on
// SearchLibraryResponseBody
func ValidateSearchLibraryResponseBody(body *SearchLibraryResponseBody) (err error) {
	if body.FilmID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FilmID", "body"))
	}
	if body.FilmInfo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FilmInfo", "body"))
	}
	if body.FilmInfo != nil {
		if err2 := ValidateFilmInfoResponseBody(body.FilmInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFilmInfoResponseBody runs the validations defined on
// FilmInfoResponseBody
func ValidateFilmInfoResponseBody(body *FilmInfoResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Description", "body"))
	}
	if body.ReleaseDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ReleaseDate", "body"))
	}
	if body.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Rating", "body"))
	}
	if body.Actors == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Actors", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Title", *body.Title, utf8.RuneCountInString(*body.Title), 150, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 1000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Description", *body.Description, utf8.RuneCountInString(*body.Description), 1000, false))
		}
	}
	if body.ReleaseDate != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.ReleaseDate", *body.ReleaseDate, "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$"))
	}
	if body.Rating != nil {
		if *body.Rating < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Rating", *body.Rating, 0, true))
		}
	}
	if body.Rating != nil {
		if *body.Rating > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.Rating", *body.Rating, 10, false))
		}
	}
	return
}

// ValidateActorResultResponse runs the validations defined on
// ActorResultResponse
func ValidateActorResultResponse(body *ActorResultResponse) (err error) {
	if body.ActorID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ActorID", "body"))
	}
	return
}

// ValidateFilmResultResponse runs the validations defined on FilmResultResponse
func ValidateFilmResultResponse(body *FilmResultResponse) (err error) {
	if body.FilmID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("FilmID", "body"))
	}
	return
}
