// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ActorService HTTP client encoders and decoders
//
// Command:
// $ goa gen film-lib/design

package client

import (
	"bytes"
	"context"
	actorservice "film-lib/gen/actor_service"
	"io"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildAddActorRequest instantiates a HTTP request object with method and path
// set to call the "ActorService" service "addActor" endpoint
func (c *Client) BuildAddActorRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddActorActorServicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ActorService", "addActor", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddActorRequest returns an encoder for requests sent to the
// ActorService addActor server.
func EncodeAddActorRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*actorservice.AddActorPayload)
		if !ok {
			return goahttp.ErrInvalidType("ActorService", "addActor", "*actorservice.AddActorPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewAddActorRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("ActorService", "addActor", err)
		}
		return nil
	}
}

// DecodeAddActorResponse returns a decoder for responses returned by the
// ActorService addActor endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAddActorResponse may return the following errors:
//   - "already-exists" (type *actorservice.AlreadyExists): http.StatusBadRequest
//   - "invalid-scopes" (type actorservice.InvalidScopes): http.StatusForbidden
//   - error: internal error
func DecodeAddActorResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body uint64
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActorService", "addActor", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body AddActorAlreadyExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActorService", "addActor", err)
			}
			err = ValidateAddActorAlreadyExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActorService", "addActor", err)
			}
			return nil, NewAddActorAlreadyExists(&body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActorService", "addActor", err)
			}
			return nil, NewAddActorInvalidScopes(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ActorService", "addActor", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateActorInfoRequest instantiates a HTTP request object with method
// and path set to call the "ActorService" service "updateActorInfo" endpoint
func (c *Client) BuildUpdateActorInfoRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		actorID uint64
	)
	{
		p, ok := v.(*actorservice.UpdateActorInfoPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("ActorService", "updateActorInfo", "*actorservice.UpdateActorInfoPayload", v)
		}
		actorID = p.ActorID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateActorInfoActorServicePath(actorID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ActorService", "updateActorInfo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateActorInfoRequest returns an encoder for requests sent to the
// ActorService updateActorInfo server.
func EncodeUpdateActorInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*actorservice.UpdateActorInfoPayload)
		if !ok {
			return goahttp.ErrInvalidType("ActorService", "updateActorInfo", "*actorservice.UpdateActorInfoPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateActorInfoRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("ActorService", "updateActorInfo", err)
		}
		return nil
	}
}

// DecodeUpdateActorInfoResponse returns a decoder for responses returned by
// the ActorService updateActorInfo endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateActorInfoResponse may return the following errors:
//   - "invalid-scopes" (type actorservice.InvalidScopes): http.StatusForbidden
//   - error: internal error
func DecodeUpdateActorInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActorService", "updateActorInfo", err)
			}
			return nil, NewUpdateActorInfoInvalidScopes(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ActorService", "updateActorInfo", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteActorRequest instantiates a HTTP request object with method and
// path set to call the "ActorService" service "deleteActor" endpoint
func (c *Client) BuildDeleteActorRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		actorID uint64
	)
	{
		p, ok := v.(*actorservice.DeleteActorPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("ActorService", "deleteActor", "*actorservice.DeleteActorPayload", v)
		}
		actorID = p.ActorID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteActorActorServicePath(actorID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ActorService", "deleteActor", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteActorRequest returns an encoder for requests sent to the
// ActorService deleteActor server.
func EncodeDeleteActorRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*actorservice.DeleteActorPayload)
		if !ok {
			return goahttp.ErrInvalidType("ActorService", "deleteActor", "*actorservice.DeleteActorPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteActorResponse returns a decoder for responses returned by the
// ActorService deleteActor endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteActorResponse may return the following errors:
//   - "invalid-scopes" (type actorservice.InvalidScopes): http.StatusForbidden
//   - error: internal error
func DecodeDeleteActorResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActorService", "deleteActor", err)
			}
			return nil, NewDeleteActorInvalidScopes(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ActorService", "deleteActor", resp.StatusCode, string(body))
		}
	}
}

// marshalActorserviceActorInfoToActorInfoRequestBody builds a value of type
// *ActorInfoRequestBody from a value of type *actorservice.ActorInfo.
func marshalActorserviceActorInfoToActorInfoRequestBody(v *actorservice.ActorInfo) *ActorInfoRequestBody {
	res := &ActorInfoRequestBody{
		ActorName:      v.ActorName,
		ActorSex:       v.ActorSex,
		ActorBirthdate: v.ActorBirthdate,
	}

	return res
}

// marshalActorInfoRequestBodyToActorserviceActorInfo builds a value of type
// *actorservice.ActorInfo from a value of type *ActorInfoRequestBody.
func marshalActorInfoRequestBodyToActorserviceActorInfo(v *ActorInfoRequestBody) *actorservice.ActorInfo {
	res := &actorservice.ActorInfo{
		ActorName:      v.ActorName,
		ActorSex:       v.ActorSex,
		ActorBirthdate: v.ActorBirthdate,
	}

	return res
}
