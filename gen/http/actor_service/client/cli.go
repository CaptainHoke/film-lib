// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ActorService HTTP client CLI support package
//
// Command:
// $ goa gen film-lib/design

package client

import (
	"encoding/json"
	actorservice "film-lib/gen/actor_service"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildAddActorPayload builds the payload for the ActorService addActor
// endpoint from CLI flags.
func BuildAddActorPayload(actorServiceAddActorBody string, actorServiceAddActorToken string) (*actorservice.AddActorPayload, error) {
	var err error
	var body AddActorRequestBody
	{
		err = json.Unmarshal([]byte(actorServiceAddActorBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ActorInfo\": {\n         \"ActorBirthdate\": \"2024-03-18\",\n         \"ActorName\": \"Margo Robbie\",\n         \"ActorSex\": \"F\"\n      }\n   }'")
		}
		if body.ActorInfo == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ActorInfo", "body"))
		}
		if body.ActorInfo != nil {
			if err2 := ValidateActorInfoRequestBody(body.ActorInfo); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if actorServiceAddActorToken != "" {
			token = &actorServiceAddActorToken
		}
	}
	v := &actorservice.AddActorPayload{}
	if body.ActorInfo != nil {
		v.ActorInfo = marshalActorInfoRequestBodyToActorserviceActorInfo(body.ActorInfo)
	}
	v.Token = token

	return v, nil
}

// BuildUpdateActorInfoPayload builds the payload for the ActorService
// updateActorInfo endpoint from CLI flags.
func BuildUpdateActorInfoPayload(actorServiceUpdateActorInfoBody string, actorServiceUpdateActorInfoActorID string, actorServiceUpdateActorInfoToken string) (*actorservice.UpdateActorInfoPayload, error) {
	var err error
	var body UpdateActorInfoRequestBody
	{
		err = json.Unmarshal([]byte(actorServiceUpdateActorInfoBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ActorInfo\": {\n         \"ActorBirthdate\": \"2024-03-18\",\n         \"ActorName\": \"Margo Robbie\",\n         \"ActorSex\": \"F\"\n      }\n   }'")
		}
		if body.ActorInfo == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ActorInfo", "body"))
		}
		if body.ActorInfo != nil {
			if err2 := ValidateActorInfoRequestBody(body.ActorInfo); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var actorID uint64
	{
		actorID, err = strconv.ParseUint(actorServiceUpdateActorInfoActorID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for actorID, must be UINT64")
		}
	}
	var token *string
	{
		if actorServiceUpdateActorInfoToken != "" {
			token = &actorServiceUpdateActorInfoToken
		}
	}
	v := &actorservice.UpdateActorInfoPayload{}
	if body.ActorInfo != nil {
		v.ActorInfo = marshalActorInfoRequestBodyToActorserviceActorInfo(body.ActorInfo)
	}
	v.ActorID = actorID
	v.Token = token

	return v, nil
}

// BuildDeleteActorPayload builds the payload for the ActorService deleteActor
// endpoint from CLI flags.
func BuildDeleteActorPayload(actorServiceDeleteActorActorID string, actorServiceDeleteActorToken string) (*actorservice.DeleteActorPayload, error) {
	var err error
	var actorID uint64
	{
		actorID, err = strconv.ParseUint(actorServiceDeleteActorActorID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for actorID, must be UINT64")
		}
	}
	var token *string
	{
		if actorServiceDeleteActorToken != "" {
			token = &actorServiceDeleteActorToken
		}
	}
	v := &actorservice.DeleteActorPayload{}
	v.ActorID = actorID
	v.Token = token

	return v, nil
}
