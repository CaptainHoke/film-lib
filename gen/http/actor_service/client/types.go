// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ActorService HTTP client types
//
// Command:
// $ goa gen film-lib/design

package client

import (
	actorservice "film-lib/gen/actor_service"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// AddActorRequestBody is the type of the "ActorService" service "addActor"
// endpoint HTTP request body.
type AddActorRequestBody struct {
	ActorInfo *ActorInfoRequestBody `form:"ActorInfo" json:"ActorInfo" xml:"ActorInfo"`
}

// UpdateActorInfoRequestBody is the type of the "ActorService" service
// "updateActorInfo" endpoint HTTP request body.
type UpdateActorInfoRequestBody struct {
	ActorInfo *ActorInfoRequestBody `form:"ActorInfo" json:"ActorInfo" xml:"ActorInfo"`
}

// AddActorAlreadyExistsResponseBody is the type of the "ActorService" service
// "addActor" endpoint HTTP response body for the "already-exists" error.
type AddActorAlreadyExistsResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of existing data
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ActorInfoRequestBody is used to define fields on request body types.
type ActorInfoRequestBody struct {
	// Name of an Actor
	ActorName string `form:"ActorName" json:"ActorName" xml:"ActorName"`
	// Sex of an Actor
	ActorSex string `form:"ActorSex" json:"ActorSex" xml:"ActorSex"`
	// YYYY-MM-DD
	ActorBirthdate string `form:"ActorBirthdate" json:"ActorBirthdate" xml:"ActorBirthdate"`
}

// NewAddActorRequestBody builds the HTTP request body from the payload of the
// "addActor" endpoint of the "ActorService" service.
func NewAddActorRequestBody(p *actorservice.AddActorPayload) *AddActorRequestBody {
	body := &AddActorRequestBody{}
	if p.ActorInfo != nil {
		body.ActorInfo = marshalActorserviceActorInfoToActorInfoRequestBody(p.ActorInfo)
	}
	return body
}

// NewUpdateActorInfoRequestBody builds the HTTP request body from the payload
// of the "updateActorInfo" endpoint of the "ActorService" service.
func NewUpdateActorInfoRequestBody(p *actorservice.UpdateActorInfoPayload) *UpdateActorInfoRequestBody {
	body := &UpdateActorInfoRequestBody{}
	if p.ActorInfo != nil {
		body.ActorInfo = marshalActorserviceActorInfoToActorInfoRequestBody(p.ActorInfo)
	}
	return body
}

// NewAddActorAlreadyExists builds a ActorService service addActor endpoint
// already-exists error.
func NewAddActorAlreadyExists(body *AddActorAlreadyExistsResponseBody) *actorservice.AlreadyExists {
	v := &actorservice.AlreadyExists{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewAddActorInvalidScopes builds a ActorService service addActor endpoint
// invalid-scopes error.
func NewAddActorInvalidScopes(body string) actorservice.InvalidScopes {
	v := actorservice.InvalidScopes(body)

	return v
}

// NewUpdateActorInfoInvalidScopes builds a ActorService service
// updateActorInfo endpoint invalid-scopes error.
func NewUpdateActorInfoInvalidScopes(body string) actorservice.InvalidScopes {
	v := actorservice.InvalidScopes(body)

	return v
}

// NewDeleteActorInvalidScopes builds a ActorService service deleteActor
// endpoint invalid-scopes error.
func NewDeleteActorInvalidScopes(body string) actorservice.InvalidScopes {
	v := actorservice.InvalidScopes(body)

	return v
}

// ValidateAddActorAlreadyExistsResponseBody runs the validations defined on
// addActor_already-exists_response_body
func ValidateAddActorAlreadyExistsResponseBody(body *AddActorAlreadyExistsResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateActorInfoRequestBody runs the validations defined on
// ActorInfoRequestBody
func ValidateActorInfoRequestBody(body *ActorInfoRequestBody) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("body.ActorName", body.ActorName, "^.*\\S.*$"))
	if utf8.RuneCountInString(body.ActorName) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.ActorName", body.ActorName, utf8.RuneCountInString(body.ActorName), 32, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("body.ActorSex", body.ActorSex, "^(M|F)$"))
	err = goa.MergeErrors(err, goa.ValidatePattern("body.ActorBirthdate", body.ActorBirthdate, "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$"))
	return
}
