// Code generated by goa v3.15.2, DO NOT EDIT.
//
// ActorService HTTP server
//
// Command:
// $ goa gen film-lib/design

package server

import (
	"context"
	actorservice "film-lib/gen/actor_service"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the ActorService service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	GetAllActors    http.Handler
	AddActor        http.Handler
	UpdateActorInfo http.Handler
	DeleteActor     http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the ActorService service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *actorservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetAllActors", "GET", "/actors"},
			{"AddActor", "POST", "/actors"},
			{"UpdateActorInfo", "PUT", "/actors/{ActorID}"},
			{"DeleteActor", "DELETE", "/actors/{ActorID}"},
		},
		GetAllActors:    NewGetAllActorsHandler(e.GetAllActors, mux, decoder, encoder, errhandler, formatter),
		AddActor:        NewAddActorHandler(e.AddActor, mux, decoder, encoder, errhandler, formatter),
		UpdateActorInfo: NewUpdateActorInfoHandler(e.UpdateActorInfo, mux, decoder, encoder, errhandler, formatter),
		DeleteActor:     NewDeleteActorHandler(e.DeleteActor, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "ActorService" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetAllActors = m(s.GetAllActors)
	s.AddActor = m(s.AddActor)
	s.UpdateActorInfo = m(s.UpdateActorInfo)
	s.DeleteActor = m(s.DeleteActor)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return actorservice.MethodNames[:] }

// Mount configures the mux to serve the ActorService endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetAllActorsHandler(mux, h.GetAllActors)
	MountAddActorHandler(mux, h.AddActor)
	MountUpdateActorInfoHandler(mux, h.UpdateActorInfo)
	MountDeleteActorHandler(mux, h.DeleteActor)
}

// Mount configures the mux to serve the ActorService endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetAllActorsHandler configures the mux to serve the "ActorService"
// service "getAllActors" endpoint.
func MountGetAllActorsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/actors", f)
}

// NewGetAllActorsHandler creates a HTTP handler which loads the HTTP request
// and calls the "ActorService" service "getAllActors" endpoint.
func NewGetAllActorsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAllActorsRequest(mux, decoder)
		encodeResponse = EncodeGetAllActorsResponse(encoder)
		encodeError    = EncodeGetAllActorsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAllActors")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ActorService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAddActorHandler configures the mux to serve the "ActorService" service
// "addActor" endpoint.
func MountAddActorHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/actors", f)
}

// NewAddActorHandler creates a HTTP handler which loads the HTTP request and
// calls the "ActorService" service "addActor" endpoint.
func NewAddActorHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddActorRequest(mux, decoder)
		encodeResponse = EncodeAddActorResponse(encoder)
		encodeError    = EncodeAddActorError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "addActor")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ActorService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateActorInfoHandler configures the mux to serve the "ActorService"
// service "updateActorInfo" endpoint.
func MountUpdateActorInfoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/actors/{ActorID}", f)
}

// NewUpdateActorInfoHandler creates a HTTP handler which loads the HTTP
// request and calls the "ActorService" service "updateActorInfo" endpoint.
func NewUpdateActorInfoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateActorInfoRequest(mux, decoder)
		encodeResponse = EncodeUpdateActorInfoResponse(encoder)
		encodeError    = EncodeUpdateActorInfoError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateActorInfo")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ActorService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteActorHandler configures the mux to serve the "ActorService"
// service "deleteActor" endpoint.
func MountDeleteActorHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/actors/{ActorID}", f)
}

// NewDeleteActorHandler creates a HTTP handler which loads the HTTP request
// and calls the "ActorService" service "deleteActor" endpoint.
func NewDeleteActorHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteActorRequest(mux, decoder)
		encodeResponse = EncodeDeleteActorResponse(encoder)
		encodeError    = EncodeDeleteActorError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteActor")
		ctx = context.WithValue(ctx, goa.ServiceKey, "ActorService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
